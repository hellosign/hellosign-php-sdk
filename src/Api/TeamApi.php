<?php
/**
 * TeamApi
 * PHP version 7.3
 *
 * @category Class
 * @author   OpenAPI Generator team
 * @see     https://openapi-generator.tech
 */

/**
 * Dropbox Sign API
 *
 * Dropbox Sign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace HelloSignSDK\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Promise;
use GuzzleHttp\Psr7;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Utils;
use HelloSignSDK\ApiException;
use HelloSignSDK\Configuration;
use HelloSignSDK\HeaderSelector;
use HelloSignSDK\Model;
use HelloSignSDK\ObjectSerializer;
use InvalidArgumentException;
use RuntimeException;

/**
 * TeamApi Class Doc Comment
 *
 * @category Class
 * @author   OpenAPI Generator team
 * @see     https://openapi-generator.tech
 */
class TeamApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param int $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        Configuration $config = null,
        ClientInterface $client = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation teamAddMember
     *
     * Add User to Team
     *
     * @param Model\TeamAddMemberRequest $team_add_member_request team_add_member_request (required)
     * @param string $team_id The id of the team. (optional)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return Model\TeamGetResponse
     */
    public function teamAddMember(Model\TeamAddMemberRequest $team_add_member_request, string $team_id = null)
    {
        list($response) = $this->teamAddMemberWithHttpInfo($team_add_member_request, $team_id);

        return $response;
    }

    /**
     * Operation teamAddMemberWithHttpInfo
     *
     * Add User to Team
     *
     * @param Model\TeamAddMemberRequest $team_add_member_request (required)
     * @param string $team_id The id of the team. (optional)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of Model\TeamGetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function teamAddMemberWithHttpInfo(Model\TeamAddMemberRequest $team_add_member_request, string $team_id = null)
    {
        $request = $this->teamAddMemberRequest($team_add_member_request, $team_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode === 200) {
                if ('\HelloSignSDK\Model\TeamGetResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\HelloSignSDK\Model\TeamGetResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $rangeCodeLeft = (int) (substr('4XX', 0, 1) . '00');
            $rangeCodeRight = (int) (substr('4XX', 0, 1) . '99');
            if ($statusCode >= $rangeCodeLeft && $statusCode <= $rangeCodeRight) {
                if ('\HelloSignSDK\Model\ErrorResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\HelloSignSDK\Model\ErrorResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $returnType = '\HelloSignSDK\Model\TeamGetResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $statusCode = $e->getCode();

            if ($statusCode === 200) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\HelloSignSDK\Model\TeamGetResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            $rangeCodeLeft = (int) (substr('4XX', 0, 1) . '00');
            $rangeCodeRight = (int) (substr('4XX', 0, 1) . '99');
            if ($statusCode >= $rangeCodeLeft && $statusCode <= $rangeCodeRight) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\HelloSignSDK\Model\ErrorResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            throw $e;
        }
    }

    /**
     * Operation teamAddMemberAsync
     *
     * Add User to Team
     *
     * @param Model\TeamAddMemberRequest $team_add_member_request (required)
     * @param string $team_id The id of the team. (optional)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function teamAddMemberAsync(Model\TeamAddMemberRequest $team_add_member_request, string $team_id = null)
    {
        return $this->teamAddMemberAsyncWithHttpInfo($team_add_member_request, $team_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation teamAddMemberAsyncWithHttpInfo
     *
     * Add User to Team
     *
     * @param Model\TeamAddMemberRequest $team_add_member_request (required)
     * @param string $team_id The id of the team. (optional)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function teamAddMemberAsyncWithHttpInfo(Model\TeamAddMemberRequest $team_add_member_request, string $team_id = null)
    {
        $returnType = '\HelloSignSDK\Model\TeamGetResponse';
        $request = $this->teamAddMemberRequest($team_add_member_request, $team_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'teamAddMember'
     *
     * @param Model\TeamAddMemberRequest $team_add_member_request (required)
     * @param string $team_id The id of the team. (optional)
     *
     * @throws InvalidArgumentException
     * @return Psr7\Request
     */
    public function teamAddMemberRequest(Model\TeamAddMemberRequest $team_add_member_request, string $team_id = null)
    {
        // verify the required parameter 'team_add_member_request' is set
        if ($team_add_member_request === null || (is_array($team_add_member_request) && count($team_add_member_request) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $team_add_member_request when calling teamAddMember'
            );
        }

        $resourcePath = '/team/add_member';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        $formParams = ObjectSerializer::getFormParams(
            $team_add_member_request
        );

        $multipart = !empty($formParams);

        // query params
        if ($team_id !== null) {
            if ('form' === 'form' && is_array($team_id)) {
                foreach ($team_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['team_id'] = $team_id;
            }
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) === 0) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($team_add_member_request));
            } else {
                $httpBody = $team_add_member_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name' => 'body',
                        'contents' => $body,
                        'headers' => ['Content-Type' => 'application/json'],
                    ];
                }

                if ($payloadHook = $this->config->getPayloadHook()) {
                    $payloadHook('multipart', $multipartContents, $team_add_member_request);
                }

                $httpBody = new Psr7\MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':' . $this->config->getPassword());
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Psr7\Query::build($queryParams);

        return new Psr7\Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation teamCreate
     *
     * Create Team
     *
     * @param Model\TeamCreateRequest $team_create_request team_create_request (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return Model\TeamGetResponse
     */
    public function teamCreate(Model\TeamCreateRequest $team_create_request)
    {
        list($response) = $this->teamCreateWithHttpInfo($team_create_request);

        return $response;
    }

    /**
     * Operation teamCreateWithHttpInfo
     *
     * Create Team
     *
     * @param Model\TeamCreateRequest $team_create_request (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of Model\TeamGetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function teamCreateWithHttpInfo(Model\TeamCreateRequest $team_create_request)
    {
        $request = $this->teamCreateRequest($team_create_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode === 200) {
                if ('\HelloSignSDK\Model\TeamGetResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\HelloSignSDK\Model\TeamGetResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $rangeCodeLeft = (int) (substr('4XX', 0, 1) . '00');
            $rangeCodeRight = (int) (substr('4XX', 0, 1) . '99');
            if ($statusCode >= $rangeCodeLeft && $statusCode <= $rangeCodeRight) {
                if ('\HelloSignSDK\Model\ErrorResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\HelloSignSDK\Model\ErrorResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $returnType = '\HelloSignSDK\Model\TeamGetResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $statusCode = $e->getCode();

            if ($statusCode === 200) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\HelloSignSDK\Model\TeamGetResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            $rangeCodeLeft = (int) (substr('4XX', 0, 1) . '00');
            $rangeCodeRight = (int) (substr('4XX', 0, 1) . '99');
            if ($statusCode >= $rangeCodeLeft && $statusCode <= $rangeCodeRight) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\HelloSignSDK\Model\ErrorResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            throw $e;
        }
    }

    /**
     * Operation teamCreateAsync
     *
     * Create Team
     *
     * @param Model\TeamCreateRequest $team_create_request (required)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function teamCreateAsync(Model\TeamCreateRequest $team_create_request)
    {
        return $this->teamCreateAsyncWithHttpInfo($team_create_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation teamCreateAsyncWithHttpInfo
     *
     * Create Team
     *
     * @param Model\TeamCreateRequest $team_create_request (required)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function teamCreateAsyncWithHttpInfo(Model\TeamCreateRequest $team_create_request)
    {
        $returnType = '\HelloSignSDK\Model\TeamGetResponse';
        $request = $this->teamCreateRequest($team_create_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'teamCreate'
     *
     * @param Model\TeamCreateRequest $team_create_request (required)
     *
     * @throws InvalidArgumentException
     * @return Psr7\Request
     */
    public function teamCreateRequest(Model\TeamCreateRequest $team_create_request)
    {
        // verify the required parameter 'team_create_request' is set
        if ($team_create_request === null || (is_array($team_create_request) && count($team_create_request) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $team_create_request when calling teamCreate'
            );
        }

        $resourcePath = '/team/create';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        $formParams = ObjectSerializer::getFormParams(
            $team_create_request
        );

        $multipart = !empty($formParams);

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) === 0) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($team_create_request));
            } else {
                $httpBody = $team_create_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name' => 'body',
                        'contents' => $body,
                        'headers' => ['Content-Type' => 'application/json'],
                    ];
                }

                if ($payloadHook = $this->config->getPayloadHook()) {
                    $payloadHook('multipart', $multipartContents, $team_create_request);
                }

                $httpBody = new Psr7\MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':' . $this->config->getPassword());
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Psr7\Query::build($queryParams);

        return new Psr7\Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation teamDelete
     *
     * Delete Team
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return void
     */
    public function teamDelete()
    {
        $this->teamDeleteWithHttpInfo();
    }

    /**
     * Operation teamDeleteWithHttpInfo
     *
     * Delete Team
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function teamDeleteWithHttpInfo()
    {
        $request = $this->teamDeleteRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            $statusCode = $e->getCode();

            $rangeCodeLeft = (int) (substr('4XX', 0, 1) . '00');
            $rangeCodeRight = (int) (substr('4XX', 0, 1) . '99');
            if ($statusCode >= $rangeCodeLeft && $statusCode <= $rangeCodeRight) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\HelloSignSDK\Model\ErrorResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            throw $e;
        }
    }

    /**
     * Operation teamDeleteAsync
     *
     * Delete Team
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function teamDeleteAsync()
    {
        return $this->teamDeleteAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation teamDeleteAsyncWithHttpInfo
     *
     * Delete Team
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function teamDeleteAsyncWithHttpInfo()
    {
        $returnType = '';
        $request = $this->teamDeleteRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'teamDelete'
     *
     * @throws InvalidArgumentException
     * @return Psr7\Request
     */
    public function teamDeleteRequest()
    {
        $resourcePath = '/team/destroy';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        $formParams = [];
        $multipart = false;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name' => 'body',
                        'contents' => $body,
                        'headers' => ['Content-Type' => 'application/json'],
                    ];
                }

                $httpBody = new Psr7\MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':' . $this->config->getPassword());
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Psr7\Query::build($queryParams);

        return new Psr7\Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation teamGet
     *
     * Get Team
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return Model\TeamGetResponse
     */
    public function teamGet()
    {
        list($response) = $this->teamGetWithHttpInfo();

        return $response;
    }

    /**
     * Operation teamGetWithHttpInfo
     *
     * Get Team
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of Model\TeamGetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function teamGetWithHttpInfo()
    {
        $request = $this->teamGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode === 200) {
                if ('\HelloSignSDK\Model\TeamGetResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\HelloSignSDK\Model\TeamGetResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $rangeCodeLeft = (int) (substr('4XX', 0, 1) . '00');
            $rangeCodeRight = (int) (substr('4XX', 0, 1) . '99');
            if ($statusCode >= $rangeCodeLeft && $statusCode <= $rangeCodeRight) {
                if ('\HelloSignSDK\Model\ErrorResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\HelloSignSDK\Model\ErrorResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $returnType = '\HelloSignSDK\Model\TeamGetResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $statusCode = $e->getCode();

            if ($statusCode === 200) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\HelloSignSDK\Model\TeamGetResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            $rangeCodeLeft = (int) (substr('4XX', 0, 1) . '00');
            $rangeCodeRight = (int) (substr('4XX', 0, 1) . '99');
            if ($statusCode >= $rangeCodeLeft && $statusCode <= $rangeCodeRight) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\HelloSignSDK\Model\ErrorResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            throw $e;
        }
    }

    /**
     * Operation teamGetAsync
     *
     * Get Team
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function teamGetAsync()
    {
        return $this->teamGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation teamGetAsyncWithHttpInfo
     *
     * Get Team
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function teamGetAsyncWithHttpInfo()
    {
        $returnType = '\HelloSignSDK\Model\TeamGetResponse';
        $request = $this->teamGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'teamGet'
     *
     * @throws InvalidArgumentException
     * @return Psr7\Request
     */
    public function teamGetRequest()
    {
        $resourcePath = '/team';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        $formParams = [];
        $multipart = false;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name' => 'body',
                        'contents' => $body,
                        'headers' => ['Content-Type' => 'application/json'],
                    ];
                }

                $httpBody = new Psr7\MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':' . $this->config->getPassword());
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Psr7\Query::build($queryParams);

        return new Psr7\Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation teamInfo
     *
     * Get Team Info
     *
     * @param string $team_id The id of the team. (optional)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return Model\TeamGetInfoResponse
     */
    public function teamInfo(string $team_id = null)
    {
        list($response) = $this->teamInfoWithHttpInfo($team_id);

        return $response;
    }

    /**
     * Operation teamInfoWithHttpInfo
     *
     * Get Team Info
     *
     * @param string $team_id The id of the team. (optional)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of Model\TeamGetInfoResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function teamInfoWithHttpInfo(string $team_id = null)
    {
        $request = $this->teamInfoRequest($team_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode === 200) {
                if ('\HelloSignSDK\Model\TeamGetInfoResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\HelloSignSDK\Model\TeamGetInfoResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $rangeCodeLeft = (int) (substr('4XX', 0, 1) . '00');
            $rangeCodeRight = (int) (substr('4XX', 0, 1) . '99');
            if ($statusCode >= $rangeCodeLeft && $statusCode <= $rangeCodeRight) {
                if ('\HelloSignSDK\Model\ErrorResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\HelloSignSDK\Model\ErrorResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $returnType = '\HelloSignSDK\Model\TeamGetInfoResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $statusCode = $e->getCode();

            if ($statusCode === 200) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\HelloSignSDK\Model\TeamGetInfoResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            $rangeCodeLeft = (int) (substr('4XX', 0, 1) . '00');
            $rangeCodeRight = (int) (substr('4XX', 0, 1) . '99');
            if ($statusCode >= $rangeCodeLeft && $statusCode <= $rangeCodeRight) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\HelloSignSDK\Model\ErrorResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            throw $e;
        }
    }

    /**
     * Operation teamInfoAsync
     *
     * Get Team Info
     *
     * @param string $team_id The id of the team. (optional)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function teamInfoAsync(string $team_id = null)
    {
        return $this->teamInfoAsyncWithHttpInfo($team_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation teamInfoAsyncWithHttpInfo
     *
     * Get Team Info
     *
     * @param string $team_id The id of the team. (optional)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function teamInfoAsyncWithHttpInfo(string $team_id = null)
    {
        $returnType = '\HelloSignSDK\Model\TeamGetInfoResponse';
        $request = $this->teamInfoRequest($team_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'teamInfo'
     *
     * @param string $team_id The id of the team. (optional)
     *
     * @throws InvalidArgumentException
     * @return Psr7\Request
     */
    public function teamInfoRequest(string $team_id = null)
    {
        $resourcePath = '/team/info';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        $formParams = [];
        $multipart = false;

        // query params
        if ($team_id !== null) {
            if ('form' === 'form' && is_array($team_id)) {
                foreach ($team_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['team_id'] = $team_id;
            }
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name' => 'body',
                        'contents' => $body,
                        'headers' => ['Content-Type' => 'application/json'],
                    ];
                }

                $httpBody = new Psr7\MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':' . $this->config->getPassword());
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Psr7\Query::build($queryParams);

        return new Psr7\Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation teamInvites
     *
     * List Team Invites
     *
     * @param string $email_address The email address for which to display the team invites. (optional)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return Model\TeamInvitesResponse
     */
    public function teamInvites(string $email_address = null)
    {
        list($response) = $this->teamInvitesWithHttpInfo($email_address);

        return $response;
    }

    /**
     * Operation teamInvitesWithHttpInfo
     *
     * List Team Invites
     *
     * @param string $email_address The email address for which to display the team invites. (optional)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of Model\TeamInvitesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function teamInvitesWithHttpInfo(string $email_address = null)
    {
        $request = $this->teamInvitesRequest($email_address);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode === 200) {
                if ('\HelloSignSDK\Model\TeamInvitesResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\HelloSignSDK\Model\TeamInvitesResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $rangeCodeLeft = (int) (substr('4XX', 0, 1) . '00');
            $rangeCodeRight = (int) (substr('4XX', 0, 1) . '99');
            if ($statusCode >= $rangeCodeLeft && $statusCode <= $rangeCodeRight) {
                if ('\HelloSignSDK\Model\ErrorResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\HelloSignSDK\Model\ErrorResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $returnType = '\HelloSignSDK\Model\TeamInvitesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $statusCode = $e->getCode();

            if ($statusCode === 200) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\HelloSignSDK\Model\TeamInvitesResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            $rangeCodeLeft = (int) (substr('4XX', 0, 1) . '00');
            $rangeCodeRight = (int) (substr('4XX', 0, 1) . '99');
            if ($statusCode >= $rangeCodeLeft && $statusCode <= $rangeCodeRight) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\HelloSignSDK\Model\ErrorResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            throw $e;
        }
    }

    /**
     * Operation teamInvitesAsync
     *
     * List Team Invites
     *
     * @param string $email_address The email address for which to display the team invites. (optional)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function teamInvitesAsync(string $email_address = null)
    {
        return $this->teamInvitesAsyncWithHttpInfo($email_address)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation teamInvitesAsyncWithHttpInfo
     *
     * List Team Invites
     *
     * @param string $email_address The email address for which to display the team invites. (optional)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function teamInvitesAsyncWithHttpInfo(string $email_address = null)
    {
        $returnType = '\HelloSignSDK\Model\TeamInvitesResponse';
        $request = $this->teamInvitesRequest($email_address);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'teamInvites'
     *
     * @param string $email_address The email address for which to display the team invites. (optional)
     *
     * @throws InvalidArgumentException
     * @return Psr7\Request
     */
    public function teamInvitesRequest(string $email_address = null)
    {
        $resourcePath = '/team/invites';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        $formParams = [];
        $multipart = false;

        // query params
        if ($email_address !== null) {
            if ('form' === 'form' && is_array($email_address)) {
                foreach ($email_address as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['email_address'] = $email_address;
            }
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name' => 'body',
                        'contents' => $body,
                        'headers' => ['Content-Type' => 'application/json'],
                    ];
                }

                $httpBody = new Psr7\MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':' . $this->config->getPassword());
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Psr7\Query::build($queryParams);

        return new Psr7\Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation teamMembers
     *
     * List Team Members
     *
     * @param string $team_id The id of the team that a member list is being requested from. (required)
     * @param int $page Which page number of the team member list to return. Defaults to &#x60;1&#x60;. (optional, default to 1)
     * @param int $page_size Number of objects to be returned per page. Must be between &#x60;1&#x60; and &#x60;100&#x60;. Default is &#x60;20&#x60;. (optional, default to 20)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return Model\TeamMembersResponse
     */
    public function teamMembers(string $team_id, int $page = 1, int $page_size = 20)
    {
        list($response) = $this->teamMembersWithHttpInfo($team_id, $page, $page_size);

        return $response;
    }

    /**
     * Operation teamMembersWithHttpInfo
     *
     * List Team Members
     *
     * @param string $team_id The id of the team that a member list is being requested from. (required)
     * @param int $page Which page number of the team member list to return. Defaults to &#x60;1&#x60;. (optional, default to 1)
     * @param int $page_size Number of objects to be returned per page. Must be between &#x60;1&#x60; and &#x60;100&#x60;. Default is &#x60;20&#x60;. (optional, default to 20)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of Model\TeamMembersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function teamMembersWithHttpInfo(string $team_id, int $page = 1, int $page_size = 20)
    {
        $request = $this->teamMembersRequest($team_id, $page, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode === 200) {
                if ('\HelloSignSDK\Model\TeamMembersResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\HelloSignSDK\Model\TeamMembersResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $rangeCodeLeft = (int) (substr('4XX', 0, 1) . '00');
            $rangeCodeRight = (int) (substr('4XX', 0, 1) . '99');
            if ($statusCode >= $rangeCodeLeft && $statusCode <= $rangeCodeRight) {
                if ('\HelloSignSDK\Model\ErrorResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\HelloSignSDK\Model\ErrorResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $returnType = '\HelloSignSDK\Model\TeamMembersResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $statusCode = $e->getCode();

            if ($statusCode === 200) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\HelloSignSDK\Model\TeamMembersResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            $rangeCodeLeft = (int) (substr('4XX', 0, 1) . '00');
            $rangeCodeRight = (int) (substr('4XX', 0, 1) . '99');
            if ($statusCode >= $rangeCodeLeft && $statusCode <= $rangeCodeRight) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\HelloSignSDK\Model\ErrorResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            throw $e;
        }
    }

    /**
     * Operation teamMembersAsync
     *
     * List Team Members
     *
     * @param string $team_id The id of the team that a member list is being requested from. (required)
     * @param int $page Which page number of the team member list to return. Defaults to &#x60;1&#x60;. (optional, default to 1)
     * @param int $page_size Number of objects to be returned per page. Must be between &#x60;1&#x60; and &#x60;100&#x60;. Default is &#x60;20&#x60;. (optional, default to 20)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function teamMembersAsync(string $team_id, int $page = 1, int $page_size = 20)
    {
        return $this->teamMembersAsyncWithHttpInfo($team_id, $page, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation teamMembersAsyncWithHttpInfo
     *
     * List Team Members
     *
     * @param string $team_id The id of the team that a member list is being requested from. (required)
     * @param int $page Which page number of the team member list to return. Defaults to &#x60;1&#x60;. (optional, default to 1)
     * @param int $page_size Number of objects to be returned per page. Must be between &#x60;1&#x60; and &#x60;100&#x60;. Default is &#x60;20&#x60;. (optional, default to 20)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function teamMembersAsyncWithHttpInfo(string $team_id, int $page = 1, int $page_size = 20)
    {
        $returnType = '\HelloSignSDK\Model\TeamMembersResponse';
        $request = $this->teamMembersRequest($team_id, $page, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'teamMembers'
     *
     * @param string $team_id The id of the team that a member list is being requested from. (required)
     * @param int $page Which page number of the team member list to return. Defaults to &#x60;1&#x60;. (optional, default to 1)
     * @param int $page_size Number of objects to be returned per page. Must be between &#x60;1&#x60; and &#x60;100&#x60;. Default is &#x60;20&#x60;. (optional, default to 20)
     *
     * @throws InvalidArgumentException
     * @return Psr7\Request
     */
    public function teamMembersRequest(string $team_id, int $page = 1, int $page_size = 20)
    {
        // verify the required parameter 'team_id' is set
        if ($team_id === null || (is_array($team_id) && count($team_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $team_id when calling teamMembers'
            );
        }
        if ($page_size !== null && $page_size > 100) {
            throw new InvalidArgumentException('invalid value for "$page_size" when calling TeamApi.teamMembers, must be smaller than or equal to 100.');
        }
        if ($page_size !== null && $page_size < 1) {
            throw new InvalidArgumentException('invalid value for "$page_size" when calling TeamApi.teamMembers, must be bigger than or equal to 1.');
        }

        $resourcePath = '/team/members/{team_id}';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        $formParams = [];
        $multipart = false;

        // query params
        if ($page !== null) {
            if ('form' === 'form' && is_array($page)) {
                foreach ($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($page_size !== null) {
            if ('form' === 'form' && is_array($page_size)) {
                foreach ($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['page_size'] = $page_size;
            }
        }

        // path params
        if ($team_id !== null) {
            $resourcePath = str_replace(
                '{' . 'team_id' . '}',
                ObjectSerializer::toPathValue($team_id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name' => 'body',
                        'contents' => $body,
                        'headers' => ['Content-Type' => 'application/json'],
                    ];
                }

                $httpBody = new Psr7\MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':' . $this->config->getPassword());
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Psr7\Query::build($queryParams);

        return new Psr7\Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation teamRemoveMember
     *
     * Remove User from Team
     *
     * @param Model\TeamRemoveMemberRequest $team_remove_member_request team_remove_member_request (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return Model\TeamGetResponse
     */
    public function teamRemoveMember(Model\TeamRemoveMemberRequest $team_remove_member_request)
    {
        list($response) = $this->teamRemoveMemberWithHttpInfo($team_remove_member_request);

        return $response;
    }

    /**
     * Operation teamRemoveMemberWithHttpInfo
     *
     * Remove User from Team
     *
     * @param Model\TeamRemoveMemberRequest $team_remove_member_request (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of Model\TeamGetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function teamRemoveMemberWithHttpInfo(Model\TeamRemoveMemberRequest $team_remove_member_request)
    {
        $request = $this->teamRemoveMemberRequest($team_remove_member_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode === 200) {
                if ('\HelloSignSDK\Model\TeamGetResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\HelloSignSDK\Model\TeamGetResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $rangeCodeLeft = (int) (substr('4XX', 0, 1) . '00');
            $rangeCodeRight = (int) (substr('4XX', 0, 1) . '99');
            if ($statusCode >= $rangeCodeLeft && $statusCode <= $rangeCodeRight) {
                if ('\HelloSignSDK\Model\ErrorResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\HelloSignSDK\Model\ErrorResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $returnType = '\HelloSignSDK\Model\TeamGetResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $statusCode = $e->getCode();

            if ($statusCode === 200) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\HelloSignSDK\Model\TeamGetResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            $rangeCodeLeft = (int) (substr('4XX', 0, 1) . '00');
            $rangeCodeRight = (int) (substr('4XX', 0, 1) . '99');
            if ($statusCode >= $rangeCodeLeft && $statusCode <= $rangeCodeRight) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\HelloSignSDK\Model\ErrorResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            throw $e;
        }
    }

    /**
     * Operation teamRemoveMemberAsync
     *
     * Remove User from Team
     *
     * @param Model\TeamRemoveMemberRequest $team_remove_member_request (required)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function teamRemoveMemberAsync(Model\TeamRemoveMemberRequest $team_remove_member_request)
    {
        return $this->teamRemoveMemberAsyncWithHttpInfo($team_remove_member_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation teamRemoveMemberAsyncWithHttpInfo
     *
     * Remove User from Team
     *
     * @param Model\TeamRemoveMemberRequest $team_remove_member_request (required)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function teamRemoveMemberAsyncWithHttpInfo(Model\TeamRemoveMemberRequest $team_remove_member_request)
    {
        $returnType = '\HelloSignSDK\Model\TeamGetResponse';
        $request = $this->teamRemoveMemberRequest($team_remove_member_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'teamRemoveMember'
     *
     * @param Model\TeamRemoveMemberRequest $team_remove_member_request (required)
     *
     * @throws InvalidArgumentException
     * @return Psr7\Request
     */
    public function teamRemoveMemberRequest(Model\TeamRemoveMemberRequest $team_remove_member_request)
    {
        // verify the required parameter 'team_remove_member_request' is set
        if ($team_remove_member_request === null || (is_array($team_remove_member_request) && count($team_remove_member_request) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $team_remove_member_request when calling teamRemoveMember'
            );
        }

        $resourcePath = '/team/remove_member';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        $formParams = ObjectSerializer::getFormParams(
            $team_remove_member_request
        );

        $multipart = !empty($formParams);

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) === 0) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($team_remove_member_request));
            } else {
                $httpBody = $team_remove_member_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name' => 'body',
                        'contents' => $body,
                        'headers' => ['Content-Type' => 'application/json'],
                    ];
                }

                if ($payloadHook = $this->config->getPayloadHook()) {
                    $payloadHook('multipart', $multipartContents, $team_remove_member_request);
                }

                $httpBody = new Psr7\MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':' . $this->config->getPassword());
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Psr7\Query::build($queryParams);

        return new Psr7\Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation teamSubTeams
     *
     * List Sub Teams
     *
     * @param string $team_id The id of the parent Team. (required)
     * @param int $page Which page number of the SubTeam List to return. Defaults to &#x60;1&#x60;. (optional, default to 1)
     * @param int $page_size Number of objects to be returned per page. Must be between &#x60;1&#x60; and &#x60;100&#x60;. Default is &#x60;20&#x60;. (optional, default to 20)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return Model\TeamSubTeamsResponse
     */
    public function teamSubTeams(string $team_id, int $page = 1, int $page_size = 20)
    {
        list($response) = $this->teamSubTeamsWithHttpInfo($team_id, $page, $page_size);

        return $response;
    }

    /**
     * Operation teamSubTeamsWithHttpInfo
     *
     * List Sub Teams
     *
     * @param string $team_id The id of the parent Team. (required)
     * @param int $page Which page number of the SubTeam List to return. Defaults to &#x60;1&#x60;. (optional, default to 1)
     * @param int $page_size Number of objects to be returned per page. Must be between &#x60;1&#x60; and &#x60;100&#x60;. Default is &#x60;20&#x60;. (optional, default to 20)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of Model\TeamSubTeamsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function teamSubTeamsWithHttpInfo(string $team_id, int $page = 1, int $page_size = 20)
    {
        $request = $this->teamSubTeamsRequest($team_id, $page, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode === 200) {
                if ('\HelloSignSDK\Model\TeamSubTeamsResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\HelloSignSDK\Model\TeamSubTeamsResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $rangeCodeLeft = (int) (substr('4XX', 0, 1) . '00');
            $rangeCodeRight = (int) (substr('4XX', 0, 1) . '99');
            if ($statusCode >= $rangeCodeLeft && $statusCode <= $rangeCodeRight) {
                if ('\HelloSignSDK\Model\ErrorResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\HelloSignSDK\Model\ErrorResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $returnType = '\HelloSignSDK\Model\TeamSubTeamsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $statusCode = $e->getCode();

            if ($statusCode === 200) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\HelloSignSDK\Model\TeamSubTeamsResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            $rangeCodeLeft = (int) (substr('4XX', 0, 1) . '00');
            $rangeCodeRight = (int) (substr('4XX', 0, 1) . '99');
            if ($statusCode >= $rangeCodeLeft && $statusCode <= $rangeCodeRight) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\HelloSignSDK\Model\ErrorResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            throw $e;
        }
    }

    /**
     * Operation teamSubTeamsAsync
     *
     * List Sub Teams
     *
     * @param string $team_id The id of the parent Team. (required)
     * @param int $page Which page number of the SubTeam List to return. Defaults to &#x60;1&#x60;. (optional, default to 1)
     * @param int $page_size Number of objects to be returned per page. Must be between &#x60;1&#x60; and &#x60;100&#x60;. Default is &#x60;20&#x60;. (optional, default to 20)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function teamSubTeamsAsync(string $team_id, int $page = 1, int $page_size = 20)
    {
        return $this->teamSubTeamsAsyncWithHttpInfo($team_id, $page, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation teamSubTeamsAsyncWithHttpInfo
     *
     * List Sub Teams
     *
     * @param string $team_id The id of the parent Team. (required)
     * @param int $page Which page number of the SubTeam List to return. Defaults to &#x60;1&#x60;. (optional, default to 1)
     * @param int $page_size Number of objects to be returned per page. Must be between &#x60;1&#x60; and &#x60;100&#x60;. Default is &#x60;20&#x60;. (optional, default to 20)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function teamSubTeamsAsyncWithHttpInfo(string $team_id, int $page = 1, int $page_size = 20)
    {
        $returnType = '\HelloSignSDK\Model\TeamSubTeamsResponse';
        $request = $this->teamSubTeamsRequest($team_id, $page, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'teamSubTeams'
     *
     * @param string $team_id The id of the parent Team. (required)
     * @param int $page Which page number of the SubTeam List to return. Defaults to &#x60;1&#x60;. (optional, default to 1)
     * @param int $page_size Number of objects to be returned per page. Must be between &#x60;1&#x60; and &#x60;100&#x60;. Default is &#x60;20&#x60;. (optional, default to 20)
     *
     * @throws InvalidArgumentException
     * @return Psr7\Request
     */
    public function teamSubTeamsRequest(string $team_id, int $page = 1, int $page_size = 20)
    {
        // verify the required parameter 'team_id' is set
        if ($team_id === null || (is_array($team_id) && count($team_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $team_id when calling teamSubTeams'
            );
        }
        if ($page_size !== null && $page_size > 100) {
            throw new InvalidArgumentException('invalid value for "$page_size" when calling TeamApi.teamSubTeams, must be smaller than or equal to 100.');
        }
        if ($page_size !== null && $page_size < 1) {
            throw new InvalidArgumentException('invalid value for "$page_size" when calling TeamApi.teamSubTeams, must be bigger than or equal to 1.');
        }

        $resourcePath = '/team/sub_teams/{team_id}';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        $formParams = [];
        $multipart = false;

        // query params
        if ($page !== null) {
            if ('form' === 'form' && is_array($page)) {
                foreach ($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($page_size !== null) {
            if ('form' === 'form' && is_array($page_size)) {
                foreach ($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['page_size'] = $page_size;
            }
        }

        // path params
        if ($team_id !== null) {
            $resourcePath = str_replace(
                '{' . 'team_id' . '}',
                ObjectSerializer::toPathValue($team_id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name' => 'body',
                        'contents' => $body,
                        'headers' => ['Content-Type' => 'application/json'],
                    ];
                }

                $httpBody = new Psr7\MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':' . $this->config->getPassword());
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Psr7\Query::build($queryParams);

        return new Psr7\Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation teamUpdate
     *
     * Update Team
     *
     * @param Model\TeamUpdateRequest $team_update_request team_update_request (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return Model\TeamGetResponse
     */
    public function teamUpdate(Model\TeamUpdateRequest $team_update_request)
    {
        list($response) = $this->teamUpdateWithHttpInfo($team_update_request);

        return $response;
    }

    /**
     * Operation teamUpdateWithHttpInfo
     *
     * Update Team
     *
     * @param Model\TeamUpdateRequest $team_update_request (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of Model\TeamGetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function teamUpdateWithHttpInfo(Model\TeamUpdateRequest $team_update_request)
    {
        $request = $this->teamUpdateRequest($team_update_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode === 200) {
                if ('\HelloSignSDK\Model\TeamGetResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\HelloSignSDK\Model\TeamGetResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $rangeCodeLeft = (int) (substr('4XX', 0, 1) . '00');
            $rangeCodeRight = (int) (substr('4XX', 0, 1) . '99');
            if ($statusCode >= $rangeCodeLeft && $statusCode <= $rangeCodeRight) {
                if ('\HelloSignSDK\Model\ErrorResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\HelloSignSDK\Model\ErrorResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $returnType = '\HelloSignSDK\Model\TeamGetResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $statusCode = $e->getCode();

            if ($statusCode === 200) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\HelloSignSDK\Model\TeamGetResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            $rangeCodeLeft = (int) (substr('4XX', 0, 1) . '00');
            $rangeCodeRight = (int) (substr('4XX', 0, 1) . '99');
            if ($statusCode >= $rangeCodeLeft && $statusCode <= $rangeCodeRight) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\HelloSignSDK\Model\ErrorResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            throw $e;
        }
    }

    /**
     * Operation teamUpdateAsync
     *
     * Update Team
     *
     * @param Model\TeamUpdateRequest $team_update_request (required)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function teamUpdateAsync(Model\TeamUpdateRequest $team_update_request)
    {
        return $this->teamUpdateAsyncWithHttpInfo($team_update_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation teamUpdateAsyncWithHttpInfo
     *
     * Update Team
     *
     * @param Model\TeamUpdateRequest $team_update_request (required)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function teamUpdateAsyncWithHttpInfo(Model\TeamUpdateRequest $team_update_request)
    {
        $returnType = '\HelloSignSDK\Model\TeamGetResponse';
        $request = $this->teamUpdateRequest($team_update_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'teamUpdate'
     *
     * @param Model\TeamUpdateRequest $team_update_request (required)
     *
     * @throws InvalidArgumentException
     * @return Psr7\Request
     */
    public function teamUpdateRequest(Model\TeamUpdateRequest $team_update_request)
    {
        // verify the required parameter 'team_update_request' is set
        if ($team_update_request === null || (is_array($team_update_request) && count($team_update_request) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $team_update_request when calling teamUpdate'
            );
        }

        $resourcePath = '/team';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        $formParams = ObjectSerializer::getFormParams(
            $team_update_request
        );

        $multipart = !empty($formParams);

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) === 0) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($team_update_request));
            } else {
                $httpBody = $team_update_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name' => 'body',
                        'contents' => $body,
                        'headers' => ['Content-Type' => 'application/json'],
                    ];
                }

                if ($payloadHook = $this->config->getPayloadHook()) {
                    $payloadHook('multipart', $multipartContents, $team_update_request);
                }

                $httpBody = new Psr7\MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':' . $this->config->getPassword());
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Psr7\Query::build($queryParams);

        return new Psr7\Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = $this->config->getOptions();
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
