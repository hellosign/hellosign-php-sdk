<?php
/**
 * SignatureRequestApi
 * PHP version 7.3
 *
 * @category Class
 * @author   OpenAPI Generator team
 * @see     https://openapi-generator.tech
 */

/**
 * HelloSign API
 *
 * HelloSign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace HelloSignSDK\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Promise;
use GuzzleHttp\Psr7;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Utils;
use HelloSignSDK\ApiException;
use HelloSignSDK\Configuration;
use HelloSignSDK\HeaderSelector;
use HelloSignSDK\Model;
use HelloSignSDK\ObjectSerializer;
use InvalidArgumentException;
use RuntimeException;

/**
 * SignatureRequestApi Class Doc Comment
 *
 * @category Class
 * @author   OpenAPI Generator team
 * @see     https://openapi-generator.tech
 */
class SignatureRequestApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param int $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        Configuration $config = null,
        ClientInterface $client = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation signatureRequestBulkCreateEmbeddedWithTemplate
     *
     * Embedded Bulk Send with Template
     *
     * @param Model\SignatureRequestBulkCreateEmbeddedWithTemplateRequest $signature_request_bulk_create_embedded_with_template_request signature_request_bulk_create_embedded_with_template_request (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return Model\BulkSendJobSendResponse
     */
    public function signatureRequestBulkCreateEmbeddedWithTemplate(Model\SignatureRequestBulkCreateEmbeddedWithTemplateRequest $signature_request_bulk_create_embedded_with_template_request)
    {
        list($response) = $this->signatureRequestBulkCreateEmbeddedWithTemplateWithHttpInfo($signature_request_bulk_create_embedded_with_template_request);

        return $response;
    }

    /**
     * Operation signatureRequestBulkCreateEmbeddedWithTemplateWithHttpInfo
     *
     * Embedded Bulk Send with Template
     *
     * @param Model\SignatureRequestBulkCreateEmbeddedWithTemplateRequest $signature_request_bulk_create_embedded_with_template_request (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of Model\BulkSendJobSendResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function signatureRequestBulkCreateEmbeddedWithTemplateWithHttpInfo(Model\SignatureRequestBulkCreateEmbeddedWithTemplateRequest $signature_request_bulk_create_embedded_with_template_request)
    {
        $request = $this->signatureRequestBulkCreateEmbeddedWithTemplateRequest($signature_request_bulk_create_embedded_with_template_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode === 200) {
                if ('\HelloSignSDK\Model\BulkSendJobSendResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\HelloSignSDK\Model\BulkSendJobSendResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $rangeCode = substr('4XX', 1);
            if ($statusCode >= (int) "{$rangeCode}00" && $statusCode <= (int) "{$rangeCode}99") {
                if ('\HelloSignSDK\Model\ErrorResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\HelloSignSDK\Model\ErrorResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $returnType = '\HelloSignSDK\Model\BulkSendJobSendResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $statusCode = $e->getCode();

            if ($statusCode === 200) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\HelloSignSDK\Model\BulkSendJobSendResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            $rangeCode = substr('4XX', 1);
            if ($statusCode >= (int) "{$rangeCode}00" && $statusCode <= (int) "{$rangeCode}99") {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\HelloSignSDK\Model\ErrorResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            throw $e;
        }
    }

    /**
     * Operation signatureRequestBulkCreateEmbeddedWithTemplateAsync
     *
     * Embedded Bulk Send with Template
     *
     * @param Model\SignatureRequestBulkCreateEmbeddedWithTemplateRequest $signature_request_bulk_create_embedded_with_template_request (required)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function signatureRequestBulkCreateEmbeddedWithTemplateAsync(Model\SignatureRequestBulkCreateEmbeddedWithTemplateRequest $signature_request_bulk_create_embedded_with_template_request)
    {
        return $this->signatureRequestBulkCreateEmbeddedWithTemplateAsyncWithHttpInfo($signature_request_bulk_create_embedded_with_template_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation signatureRequestBulkCreateEmbeddedWithTemplateAsyncWithHttpInfo
     *
     * Embedded Bulk Send with Template
     *
     * @param Model\SignatureRequestBulkCreateEmbeddedWithTemplateRequest $signature_request_bulk_create_embedded_with_template_request (required)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function signatureRequestBulkCreateEmbeddedWithTemplateAsyncWithHttpInfo(Model\SignatureRequestBulkCreateEmbeddedWithTemplateRequest $signature_request_bulk_create_embedded_with_template_request)
    {
        $returnType = '\HelloSignSDK\Model\BulkSendJobSendResponse';
        $request = $this->signatureRequestBulkCreateEmbeddedWithTemplateRequest($signature_request_bulk_create_embedded_with_template_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'signatureRequestBulkCreateEmbeddedWithTemplate'
     *
     * @param Model\SignatureRequestBulkCreateEmbeddedWithTemplateRequest $signature_request_bulk_create_embedded_with_template_request (required)
     *
     * @throws InvalidArgumentException
     * @return Psr7\Request
     */
    public function signatureRequestBulkCreateEmbeddedWithTemplateRequest(Model\SignatureRequestBulkCreateEmbeddedWithTemplateRequest $signature_request_bulk_create_embedded_with_template_request)
    {
        // verify the required parameter 'signature_request_bulk_create_embedded_with_template_request' is set
        if ($signature_request_bulk_create_embedded_with_template_request === null || (is_array($signature_request_bulk_create_embedded_with_template_request) && count($signature_request_bulk_create_embedded_with_template_request) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $signature_request_bulk_create_embedded_with_template_request when calling signatureRequestBulkCreateEmbeddedWithTemplate'
            );
        }

        $resourcePath = '/signature_request/bulk_create_embedded_with_template';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        $formParams = ObjectSerializer::getFormParams(
            $signature_request_bulk_create_embedded_with_template_request
        );

        $multipart = !empty($formParams);

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (count($formParams) === 0) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($signature_request_bulk_create_embedded_with_template_request));
            } else {
                $httpBody = $signature_request_bulk_create_embedded_with_template_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name' => 'body',
                        'contents' => $body,
                        'headers' => ['Content-Type' => 'application/json'],
                    ];
                }
                if ($payloadHook = $this->config->getPayloadHook()) {
                    $payloadHook('multipart', $multipartContents);
                }
                $httpBody = new Psr7\MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':' . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Psr7\Query::build($queryParams);

        return new Psr7\Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation signatureRequestBulkSendWithTemplate
     *
     * Bulk Send with Template
     *
     * @param Model\SignatureRequestBulkSendWithTemplateRequest $signature_request_bulk_send_with_template_request signature_request_bulk_send_with_template_request (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return Model\BulkSendJobSendResponse
     */
    public function signatureRequestBulkSendWithTemplate(Model\SignatureRequestBulkSendWithTemplateRequest $signature_request_bulk_send_with_template_request)
    {
        list($response) = $this->signatureRequestBulkSendWithTemplateWithHttpInfo($signature_request_bulk_send_with_template_request);

        return $response;
    }

    /**
     * Operation signatureRequestBulkSendWithTemplateWithHttpInfo
     *
     * Bulk Send with Template
     *
     * @param Model\SignatureRequestBulkSendWithTemplateRequest $signature_request_bulk_send_with_template_request (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of Model\BulkSendJobSendResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function signatureRequestBulkSendWithTemplateWithHttpInfo(Model\SignatureRequestBulkSendWithTemplateRequest $signature_request_bulk_send_with_template_request)
    {
        $request = $this->signatureRequestBulkSendWithTemplateRequest($signature_request_bulk_send_with_template_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode === 200) {
                if ('\HelloSignSDK\Model\BulkSendJobSendResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\HelloSignSDK\Model\BulkSendJobSendResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $rangeCode = substr('4XX', 1);
            if ($statusCode >= (int) "{$rangeCode}00" && $statusCode <= (int) "{$rangeCode}99") {
                if ('\HelloSignSDK\Model\ErrorResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\HelloSignSDK\Model\ErrorResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $returnType = '\HelloSignSDK\Model\BulkSendJobSendResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $statusCode = $e->getCode();

            if ($statusCode === 200) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\HelloSignSDK\Model\BulkSendJobSendResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            $rangeCode = substr('4XX', 1);
            if ($statusCode >= (int) "{$rangeCode}00" && $statusCode <= (int) "{$rangeCode}99") {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\HelloSignSDK\Model\ErrorResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            throw $e;
        }
    }

    /**
     * Operation signatureRequestBulkSendWithTemplateAsync
     *
     * Bulk Send with Template
     *
     * @param Model\SignatureRequestBulkSendWithTemplateRequest $signature_request_bulk_send_with_template_request (required)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function signatureRequestBulkSendWithTemplateAsync(Model\SignatureRequestBulkSendWithTemplateRequest $signature_request_bulk_send_with_template_request)
    {
        return $this->signatureRequestBulkSendWithTemplateAsyncWithHttpInfo($signature_request_bulk_send_with_template_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation signatureRequestBulkSendWithTemplateAsyncWithHttpInfo
     *
     * Bulk Send with Template
     *
     * @param Model\SignatureRequestBulkSendWithTemplateRequest $signature_request_bulk_send_with_template_request (required)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function signatureRequestBulkSendWithTemplateAsyncWithHttpInfo(Model\SignatureRequestBulkSendWithTemplateRequest $signature_request_bulk_send_with_template_request)
    {
        $returnType = '\HelloSignSDK\Model\BulkSendJobSendResponse';
        $request = $this->signatureRequestBulkSendWithTemplateRequest($signature_request_bulk_send_with_template_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'signatureRequestBulkSendWithTemplate'
     *
     * @param Model\SignatureRequestBulkSendWithTemplateRequest $signature_request_bulk_send_with_template_request (required)
     *
     * @throws InvalidArgumentException
     * @return Psr7\Request
     */
    public function signatureRequestBulkSendWithTemplateRequest(Model\SignatureRequestBulkSendWithTemplateRequest $signature_request_bulk_send_with_template_request)
    {
        // verify the required parameter 'signature_request_bulk_send_with_template_request' is set
        if ($signature_request_bulk_send_with_template_request === null || (is_array($signature_request_bulk_send_with_template_request) && count($signature_request_bulk_send_with_template_request) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $signature_request_bulk_send_with_template_request when calling signatureRequestBulkSendWithTemplate'
            );
        }

        $resourcePath = '/signature_request/bulk_send_with_template';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        $formParams = ObjectSerializer::getFormParams(
            $signature_request_bulk_send_with_template_request
        );

        $multipart = !empty($formParams);

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (count($formParams) === 0) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($signature_request_bulk_send_with_template_request));
            } else {
                $httpBody = $signature_request_bulk_send_with_template_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name' => 'body',
                        'contents' => $body,
                        'headers' => ['Content-Type' => 'application/json'],
                    ];
                }
                if ($payloadHook = $this->config->getPayloadHook()) {
                    $payloadHook('multipart', $multipartContents);
                }
                $httpBody = new Psr7\MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':' . $this->config->getPassword());
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Psr7\Query::build($queryParams);

        return new Psr7\Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation signatureRequestCancel
     *
     * Cancel Incomplete Signature Request
     *
     * @param string $signature_request_id The id of the incomplete SignatureRequest to cancel. (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return void
     */
    public function signatureRequestCancel(string $signature_request_id)
    {
        $this->signatureRequestCancelWithHttpInfo($signature_request_id);
    }

    /**
     * Operation signatureRequestCancelWithHttpInfo
     *
     * Cancel Incomplete Signature Request
     *
     * @param string $signature_request_id The id of the incomplete SignatureRequest to cancel. (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function signatureRequestCancelWithHttpInfo(string $signature_request_id)
    {
        $request = $this->signatureRequestCancelRequest($signature_request_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            $statusCode = $e->getCode();

            $rangeCode = substr('4XX', 1);
            if ($statusCode >= (int) "{$rangeCode}00" && $statusCode <= (int) "{$rangeCode}99") {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\HelloSignSDK\Model\ErrorResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            throw $e;
        }
    }

    /**
     * Operation signatureRequestCancelAsync
     *
     * Cancel Incomplete Signature Request
     *
     * @param string $signature_request_id The id of the incomplete SignatureRequest to cancel. (required)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function signatureRequestCancelAsync(string $signature_request_id)
    {
        return $this->signatureRequestCancelAsyncWithHttpInfo($signature_request_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation signatureRequestCancelAsyncWithHttpInfo
     *
     * Cancel Incomplete Signature Request
     *
     * @param string $signature_request_id The id of the incomplete SignatureRequest to cancel. (required)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function signatureRequestCancelAsyncWithHttpInfo(string $signature_request_id)
    {
        $returnType = '';
        $request = $this->signatureRequestCancelRequest($signature_request_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'signatureRequestCancel'
     *
     * @param string $signature_request_id The id of the incomplete SignatureRequest to cancel. (required)
     *
     * @throws InvalidArgumentException
     * @return Psr7\Request
     */
    public function signatureRequestCancelRequest(string $signature_request_id)
    {
        // verify the required parameter 'signature_request_id' is set
        if ($signature_request_id === null || (is_array($signature_request_id) && count($signature_request_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $signature_request_id when calling signatureRequestCancel'
            );
        }

        $resourcePath = '/signature_request/cancel/{signature_request_id}';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        $formParams = [];
        $multipart = false;

        // path params
        if ($signature_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'signature_request_id' . '}',
                ObjectSerializer::toPathValue($signature_request_id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name' => 'body',
                        'contents' => $body,
                        'headers' => ['Content-Type' => 'application/json'],
                    ];
                }
                if ($payloadHook = $this->config->getPayloadHook()) {
                    $payloadHook('multipart', $multipartContents);
                }
                $httpBody = new Psr7\MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':' . $this->config->getPassword());
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Psr7\Query::build($queryParams);

        return new Psr7\Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation signatureRequestCreateEmbedded
     *
     * Create Embedded Signature Request
     *
     * @param Model\SignatureRequestCreateEmbeddedRequest $signature_request_create_embedded_request signature_request_create_embedded_request (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return Model\SignatureRequestGetResponse
     */
    public function signatureRequestCreateEmbedded(Model\SignatureRequestCreateEmbeddedRequest $signature_request_create_embedded_request)
    {
        list($response) = $this->signatureRequestCreateEmbeddedWithHttpInfo($signature_request_create_embedded_request);

        return $response;
    }

    /**
     * Operation signatureRequestCreateEmbeddedWithHttpInfo
     *
     * Create Embedded Signature Request
     *
     * @param Model\SignatureRequestCreateEmbeddedRequest $signature_request_create_embedded_request (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of Model\SignatureRequestGetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function signatureRequestCreateEmbeddedWithHttpInfo(Model\SignatureRequestCreateEmbeddedRequest $signature_request_create_embedded_request)
    {
        $request = $this->signatureRequestCreateEmbeddedRequest($signature_request_create_embedded_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode === 200) {
                if ('\HelloSignSDK\Model\SignatureRequestGetResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\HelloSignSDK\Model\SignatureRequestGetResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $rangeCode = substr('4XX', 1);
            if ($statusCode >= (int) "{$rangeCode}00" && $statusCode <= (int) "{$rangeCode}99") {
                if ('\HelloSignSDK\Model\ErrorResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\HelloSignSDK\Model\ErrorResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $returnType = '\HelloSignSDK\Model\SignatureRequestGetResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $statusCode = $e->getCode();

            if ($statusCode === 200) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\HelloSignSDK\Model\SignatureRequestGetResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            $rangeCode = substr('4XX', 1);
            if ($statusCode >= (int) "{$rangeCode}00" && $statusCode <= (int) "{$rangeCode}99") {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\HelloSignSDK\Model\ErrorResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            throw $e;
        }
    }

    /**
     * Operation signatureRequestCreateEmbeddedAsync
     *
     * Create Embedded Signature Request
     *
     * @param Model\SignatureRequestCreateEmbeddedRequest $signature_request_create_embedded_request (required)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function signatureRequestCreateEmbeddedAsync(Model\SignatureRequestCreateEmbeddedRequest $signature_request_create_embedded_request)
    {
        return $this->signatureRequestCreateEmbeddedAsyncWithHttpInfo($signature_request_create_embedded_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation signatureRequestCreateEmbeddedAsyncWithHttpInfo
     *
     * Create Embedded Signature Request
     *
     * @param Model\SignatureRequestCreateEmbeddedRequest $signature_request_create_embedded_request (required)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function signatureRequestCreateEmbeddedAsyncWithHttpInfo(Model\SignatureRequestCreateEmbeddedRequest $signature_request_create_embedded_request)
    {
        $returnType = '\HelloSignSDK\Model\SignatureRequestGetResponse';
        $request = $this->signatureRequestCreateEmbeddedRequest($signature_request_create_embedded_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'signatureRequestCreateEmbedded'
     *
     * @param Model\SignatureRequestCreateEmbeddedRequest $signature_request_create_embedded_request (required)
     *
     * @throws InvalidArgumentException
     * @return Psr7\Request
     */
    public function signatureRequestCreateEmbeddedRequest(Model\SignatureRequestCreateEmbeddedRequest $signature_request_create_embedded_request)
    {
        // verify the required parameter 'signature_request_create_embedded_request' is set
        if ($signature_request_create_embedded_request === null || (is_array($signature_request_create_embedded_request) && count($signature_request_create_embedded_request) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $signature_request_create_embedded_request when calling signatureRequestCreateEmbedded'
            );
        }

        $resourcePath = '/signature_request/create_embedded';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        $formParams = ObjectSerializer::getFormParams(
            $signature_request_create_embedded_request
        );

        $multipart = !empty($formParams);

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (count($formParams) === 0) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($signature_request_create_embedded_request));
            } else {
                $httpBody = $signature_request_create_embedded_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name' => 'body',
                        'contents' => $body,
                        'headers' => ['Content-Type' => 'application/json'],
                    ];
                }
                if ($payloadHook = $this->config->getPayloadHook()) {
                    $payloadHook('multipart', $multipartContents);
                }
                $httpBody = new Psr7\MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':' . $this->config->getPassword());
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Psr7\Query::build($queryParams);

        return new Psr7\Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation signatureRequestCreateEmbeddedWithTemplate
     *
     * Create Embedded Signature Request with Template
     *
     * @param Model\SignatureRequestCreateEmbeddedWithTemplateRequest $signature_request_create_embedded_with_template_request signature_request_create_embedded_with_template_request (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return Model\SignatureRequestGetResponse
     */
    public function signatureRequestCreateEmbeddedWithTemplate(Model\SignatureRequestCreateEmbeddedWithTemplateRequest $signature_request_create_embedded_with_template_request)
    {
        list($response) = $this->signatureRequestCreateEmbeddedWithTemplateWithHttpInfo($signature_request_create_embedded_with_template_request);

        return $response;
    }

    /**
     * Operation signatureRequestCreateEmbeddedWithTemplateWithHttpInfo
     *
     * Create Embedded Signature Request with Template
     *
     * @param Model\SignatureRequestCreateEmbeddedWithTemplateRequest $signature_request_create_embedded_with_template_request (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of Model\SignatureRequestGetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function signatureRequestCreateEmbeddedWithTemplateWithHttpInfo(Model\SignatureRequestCreateEmbeddedWithTemplateRequest $signature_request_create_embedded_with_template_request)
    {
        $request = $this->signatureRequestCreateEmbeddedWithTemplateRequest($signature_request_create_embedded_with_template_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode === 200) {
                if ('\HelloSignSDK\Model\SignatureRequestGetResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\HelloSignSDK\Model\SignatureRequestGetResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $rangeCode = substr('4XX', 1);
            if ($statusCode >= (int) "{$rangeCode}00" && $statusCode <= (int) "{$rangeCode}99") {
                if ('\HelloSignSDK\Model\ErrorResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\HelloSignSDK\Model\ErrorResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $returnType = '\HelloSignSDK\Model\SignatureRequestGetResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $statusCode = $e->getCode();

            if ($statusCode === 200) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\HelloSignSDK\Model\SignatureRequestGetResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            $rangeCode = substr('4XX', 1);
            if ($statusCode >= (int) "{$rangeCode}00" && $statusCode <= (int) "{$rangeCode}99") {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\HelloSignSDK\Model\ErrorResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            throw $e;
        }
    }

    /**
     * Operation signatureRequestCreateEmbeddedWithTemplateAsync
     *
     * Create Embedded Signature Request with Template
     *
     * @param Model\SignatureRequestCreateEmbeddedWithTemplateRequest $signature_request_create_embedded_with_template_request (required)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function signatureRequestCreateEmbeddedWithTemplateAsync(Model\SignatureRequestCreateEmbeddedWithTemplateRequest $signature_request_create_embedded_with_template_request)
    {
        return $this->signatureRequestCreateEmbeddedWithTemplateAsyncWithHttpInfo($signature_request_create_embedded_with_template_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation signatureRequestCreateEmbeddedWithTemplateAsyncWithHttpInfo
     *
     * Create Embedded Signature Request with Template
     *
     * @param Model\SignatureRequestCreateEmbeddedWithTemplateRequest $signature_request_create_embedded_with_template_request (required)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function signatureRequestCreateEmbeddedWithTemplateAsyncWithHttpInfo(Model\SignatureRequestCreateEmbeddedWithTemplateRequest $signature_request_create_embedded_with_template_request)
    {
        $returnType = '\HelloSignSDK\Model\SignatureRequestGetResponse';
        $request = $this->signatureRequestCreateEmbeddedWithTemplateRequest($signature_request_create_embedded_with_template_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'signatureRequestCreateEmbeddedWithTemplate'
     *
     * @param Model\SignatureRequestCreateEmbeddedWithTemplateRequest $signature_request_create_embedded_with_template_request (required)
     *
     * @throws InvalidArgumentException
     * @return Psr7\Request
     */
    public function signatureRequestCreateEmbeddedWithTemplateRequest(Model\SignatureRequestCreateEmbeddedWithTemplateRequest $signature_request_create_embedded_with_template_request)
    {
        // verify the required parameter 'signature_request_create_embedded_with_template_request' is set
        if ($signature_request_create_embedded_with_template_request === null || (is_array($signature_request_create_embedded_with_template_request) && count($signature_request_create_embedded_with_template_request) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $signature_request_create_embedded_with_template_request when calling signatureRequestCreateEmbeddedWithTemplate'
            );
        }

        $resourcePath = '/signature_request/create_embedded_with_template';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        $formParams = ObjectSerializer::getFormParams(
            $signature_request_create_embedded_with_template_request
        );

        $multipart = !empty($formParams);

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (count($formParams) === 0) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($signature_request_create_embedded_with_template_request));
            } else {
                $httpBody = $signature_request_create_embedded_with_template_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name' => 'body',
                        'contents' => $body,
                        'headers' => ['Content-Type' => 'application/json'],
                    ];
                }
                if ($payloadHook = $this->config->getPayloadHook()) {
                    $payloadHook('multipart', $multipartContents);
                }
                $httpBody = new Psr7\MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':' . $this->config->getPassword());
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Psr7\Query::build($queryParams);

        return new Psr7\Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation signatureRequestFiles
     *
     * Download Files
     *
     * @param string $signature_request_id The id of the SignatureRequest to retrieve. (required)
     * @param string $file_type Set to &#x60;pdf&#x60; for a single merged document or &#x60;zip&#x60; for a collection of individual documents. (optional, default to 'pdf')
     * @param bool $get_url If &#x60;true&#x60;, the response will contain a url link to the file instead. Links are only available for PDFs and have a TTL of 3 days. (optional, default to false)
     * @param bool $get_data_uri If &#x60;true&#x60;, the response will contain the file as base64 encoded string. Base64 encoding is only available for PDFs. (optional, default to false)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return Model\FileResponse
     */
    public function signatureRequestFiles(string $signature_request_id, string $file_type = 'pdf', bool $get_url = false, bool $get_data_uri = false)
    {
        list($response) = $this->signatureRequestFilesWithHttpInfo($signature_request_id, $file_type, $get_url, $get_data_uri);

        return $response;
    }

    /**
     * Operation signatureRequestFilesWithHttpInfo
     *
     * Download Files
     *
     * @param string $signature_request_id The id of the SignatureRequest to retrieve. (required)
     * @param string $file_type Set to &#x60;pdf&#x60; for a single merged document or &#x60;zip&#x60; for a collection of individual documents. (optional, default to 'pdf')
     * @param bool $get_url If &#x60;true&#x60;, the response will contain a url link to the file instead. Links are only available for PDFs and have a TTL of 3 days. (optional, default to false)
     * @param bool $get_data_uri If &#x60;true&#x60;, the response will contain the file as base64 encoded string. Base64 encoding is only available for PDFs. (optional, default to false)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of Model\FileResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function signatureRequestFilesWithHttpInfo(string $signature_request_id, string $file_type = 'pdf', bool $get_url = false, bool $get_data_uri = false)
    {
        $request = $this->signatureRequestFilesRequest($signature_request_id, $file_type, $get_url, $get_data_uri);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode === 200) {
                if ('\HelloSignSDK\Model\FileResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\HelloSignSDK\Model\FileResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $rangeCode = substr('4XX', 1);
            if ($statusCode >= (int) "{$rangeCode}00" && $statusCode <= (int) "{$rangeCode}99") {
                if ('\HelloSignSDK\Model\ErrorResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\HelloSignSDK\Model\ErrorResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $returnType = '\HelloSignSDK\Model\FileResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $statusCode = $e->getCode();

            if ($statusCode === 200) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\HelloSignSDK\Model\FileResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            $rangeCode = substr('4XX', 1);
            if ($statusCode >= (int) "{$rangeCode}00" && $statusCode <= (int) "{$rangeCode}99") {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\HelloSignSDK\Model\ErrorResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            throw $e;
        }
    }

    /**
     * Operation signatureRequestFilesAsync
     *
     * Download Files
     *
     * @param string $signature_request_id The id of the SignatureRequest to retrieve. (required)
     * @param string $file_type Set to &#x60;pdf&#x60; for a single merged document or &#x60;zip&#x60; for a collection of individual documents. (optional, default to 'pdf')
     * @param bool $get_url If &#x60;true&#x60;, the response will contain a url link to the file instead. Links are only available for PDFs and have a TTL of 3 days. (optional, default to false)
     * @param bool $get_data_uri If &#x60;true&#x60;, the response will contain the file as base64 encoded string. Base64 encoding is only available for PDFs. (optional, default to false)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function signatureRequestFilesAsync(string $signature_request_id, string $file_type = 'pdf', bool $get_url = false, bool $get_data_uri = false)
    {
        return $this->signatureRequestFilesAsyncWithHttpInfo($signature_request_id, $file_type, $get_url, $get_data_uri)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation signatureRequestFilesAsyncWithHttpInfo
     *
     * Download Files
     *
     * @param string $signature_request_id The id of the SignatureRequest to retrieve. (required)
     * @param string $file_type Set to &#x60;pdf&#x60; for a single merged document or &#x60;zip&#x60; for a collection of individual documents. (optional, default to 'pdf')
     * @param bool $get_url If &#x60;true&#x60;, the response will contain a url link to the file instead. Links are only available for PDFs and have a TTL of 3 days. (optional, default to false)
     * @param bool $get_data_uri If &#x60;true&#x60;, the response will contain the file as base64 encoded string. Base64 encoding is only available for PDFs. (optional, default to false)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function signatureRequestFilesAsyncWithHttpInfo(string $signature_request_id, string $file_type = 'pdf', bool $get_url = false, bool $get_data_uri = false)
    {
        $returnType = '\HelloSignSDK\Model\FileResponse';
        $request = $this->signatureRequestFilesRequest($signature_request_id, $file_type, $get_url, $get_data_uri);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'signatureRequestFiles'
     *
     * @param string $signature_request_id The id of the SignatureRequest to retrieve. (required)
     * @param string $file_type Set to &#x60;pdf&#x60; for a single merged document or &#x60;zip&#x60; for a collection of individual documents. (optional, default to 'pdf')
     * @param bool $get_url If &#x60;true&#x60;, the response will contain a url link to the file instead. Links are only available for PDFs and have a TTL of 3 days. (optional, default to false)
     * @param bool $get_data_uri If &#x60;true&#x60;, the response will contain the file as base64 encoded string. Base64 encoding is only available for PDFs. (optional, default to false)
     *
     * @throws InvalidArgumentException
     * @return Psr7\Request
     */
    public function signatureRequestFilesRequest(string $signature_request_id, string $file_type = 'pdf', bool $get_url = false, bool $get_data_uri = false)
    {
        // verify the required parameter 'signature_request_id' is set
        if ($signature_request_id === null || (is_array($signature_request_id) && count($signature_request_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $signature_request_id when calling signatureRequestFiles'
            );
        }

        $resourcePath = '/signature_request/files/{signature_request_id}';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        $formParams = [];
        $multipart = false;

        // query params
        if ($file_type !== null) {
            if ('form' === 'form' && is_array($file_type)) {
                foreach ($file_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['file_type'] = $file_type;
            }
        }
        // query params
        if ($get_url !== null) {
            if ('form' === 'form' && is_array($get_url)) {
                foreach ($get_url as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['get_url'] = $get_url;
            }
        }
        // query params
        if ($get_data_uri !== null) {
            if ('form' === 'form' && is_array($get_data_uri)) {
                foreach ($get_data_uri as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['get_data_uri'] = $get_data_uri;
            }
        }

        // path params
        if ($signature_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'signature_request_id' . '}',
                ObjectSerializer::toPathValue($signature_request_id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name' => 'body',
                        'contents' => $body,
                        'headers' => ['Content-Type' => 'application/json'],
                    ];
                }
                if ($payloadHook = $this->config->getPayloadHook()) {
                    $payloadHook('multipart', $multipartContents);
                }
                $httpBody = new Psr7\MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':' . $this->config->getPassword());
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Psr7\Query::build($queryParams);

        return new Psr7\Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation signatureRequestGet
     *
     * Get Signature Request
     *
     * @param string $signature_request_id The id of the SignatureRequest to retrieve. (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return Model\SignatureRequestGetResponse
     */
    public function signatureRequestGet(string $signature_request_id)
    {
        list($response) = $this->signatureRequestGetWithHttpInfo($signature_request_id);

        return $response;
    }

    /**
     * Operation signatureRequestGetWithHttpInfo
     *
     * Get Signature Request
     *
     * @param string $signature_request_id The id of the SignatureRequest to retrieve. (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of Model\SignatureRequestGetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function signatureRequestGetWithHttpInfo(string $signature_request_id)
    {
        $request = $this->signatureRequestGetRequest($signature_request_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode === 200) {
                if ('\HelloSignSDK\Model\SignatureRequestGetResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\HelloSignSDK\Model\SignatureRequestGetResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $rangeCode = substr('4XX', 1);
            if ($statusCode >= (int) "{$rangeCode}00" && $statusCode <= (int) "{$rangeCode}99") {
                if ('\HelloSignSDK\Model\ErrorResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\HelloSignSDK\Model\ErrorResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $returnType = '\HelloSignSDK\Model\SignatureRequestGetResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $statusCode = $e->getCode();

            if ($statusCode === 200) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\HelloSignSDK\Model\SignatureRequestGetResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            $rangeCode = substr('4XX', 1);
            if ($statusCode >= (int) "{$rangeCode}00" && $statusCode <= (int) "{$rangeCode}99") {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\HelloSignSDK\Model\ErrorResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            throw $e;
        }
    }

    /**
     * Operation signatureRequestGetAsync
     *
     * Get Signature Request
     *
     * @param string $signature_request_id The id of the SignatureRequest to retrieve. (required)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function signatureRequestGetAsync(string $signature_request_id)
    {
        return $this->signatureRequestGetAsyncWithHttpInfo($signature_request_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation signatureRequestGetAsyncWithHttpInfo
     *
     * Get Signature Request
     *
     * @param string $signature_request_id The id of the SignatureRequest to retrieve. (required)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function signatureRequestGetAsyncWithHttpInfo(string $signature_request_id)
    {
        $returnType = '\HelloSignSDK\Model\SignatureRequestGetResponse';
        $request = $this->signatureRequestGetRequest($signature_request_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'signatureRequestGet'
     *
     * @param string $signature_request_id The id of the SignatureRequest to retrieve. (required)
     *
     * @throws InvalidArgumentException
     * @return Psr7\Request
     */
    public function signatureRequestGetRequest(string $signature_request_id)
    {
        // verify the required parameter 'signature_request_id' is set
        if ($signature_request_id === null || (is_array($signature_request_id) && count($signature_request_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $signature_request_id when calling signatureRequestGet'
            );
        }

        $resourcePath = '/signature_request/{signature_request_id}';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        $formParams = [];
        $multipart = false;

        // path params
        if ($signature_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'signature_request_id' . '}',
                ObjectSerializer::toPathValue($signature_request_id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name' => 'body',
                        'contents' => $body,
                        'headers' => ['Content-Type' => 'application/json'],
                    ];
                }
                if ($payloadHook = $this->config->getPayloadHook()) {
                    $payloadHook('multipart', $multipartContents);
                }
                $httpBody = new Psr7\MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':' . $this->config->getPassword());
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Psr7\Query::build($queryParams);

        return new Psr7\Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation signatureRequestList
     *
     * List Signature Requests
     *
     * @param string $account_id Which account to return SignatureRequests for. Must be a team member. Use &#x60;all&#x60; to indicate all team members. Defaults to your account. (optional)
     * @param int $page Which page number of the SignatureRequest List to return. Defaults to &#x60;1&#x60;. (optional, default to 1)
     * @param int $page_size Number of objects to be returned per page. Must be between &#x60;1&#x60; and &#x60;100&#x60;. Default is &#x60;20&#x60;. (optional, default to 20)
     * @param string $query String that includes search terms and/or fields to be used to filter the SignatureRequest objects. (optional)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return Model\SignatureRequestListResponse
     */
    public function signatureRequestList(string $account_id = null, int $page = 1, int $page_size = 20, string $query = null)
    {
        list($response) = $this->signatureRequestListWithHttpInfo($account_id, $page, $page_size, $query);

        return $response;
    }

    /**
     * Operation signatureRequestListWithHttpInfo
     *
     * List Signature Requests
     *
     * @param string $account_id Which account to return SignatureRequests for. Must be a team member. Use &#x60;all&#x60; to indicate all team members. Defaults to your account. (optional)
     * @param int $page Which page number of the SignatureRequest List to return. Defaults to &#x60;1&#x60;. (optional, default to 1)
     * @param int $page_size Number of objects to be returned per page. Must be between &#x60;1&#x60; and &#x60;100&#x60;. Default is &#x60;20&#x60;. (optional, default to 20)
     * @param string $query String that includes search terms and/or fields to be used to filter the SignatureRequest objects. (optional)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of Model\SignatureRequestListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function signatureRequestListWithHttpInfo(string $account_id = null, int $page = 1, int $page_size = 20, string $query = null)
    {
        $request = $this->signatureRequestListRequest($account_id, $page, $page_size, $query);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode === 200) {
                if ('\HelloSignSDK\Model\SignatureRequestListResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\HelloSignSDK\Model\SignatureRequestListResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $rangeCode = substr('4XX', 1);
            if ($statusCode >= (int) "{$rangeCode}00" && $statusCode <= (int) "{$rangeCode}99") {
                if ('\HelloSignSDK\Model\ErrorResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\HelloSignSDK\Model\ErrorResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $returnType = '\HelloSignSDK\Model\SignatureRequestListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $statusCode = $e->getCode();

            if ($statusCode === 200) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\HelloSignSDK\Model\SignatureRequestListResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            $rangeCode = substr('4XX', 1);
            if ($statusCode >= (int) "{$rangeCode}00" && $statusCode <= (int) "{$rangeCode}99") {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\HelloSignSDK\Model\ErrorResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            throw $e;
        }
    }

    /**
     * Operation signatureRequestListAsync
     *
     * List Signature Requests
     *
     * @param string $account_id Which account to return SignatureRequests for. Must be a team member. Use &#x60;all&#x60; to indicate all team members. Defaults to your account. (optional)
     * @param int $page Which page number of the SignatureRequest List to return. Defaults to &#x60;1&#x60;. (optional, default to 1)
     * @param int $page_size Number of objects to be returned per page. Must be between &#x60;1&#x60; and &#x60;100&#x60;. Default is &#x60;20&#x60;. (optional, default to 20)
     * @param string $query String that includes search terms and/or fields to be used to filter the SignatureRequest objects. (optional)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function signatureRequestListAsync(string $account_id = null, int $page = 1, int $page_size = 20, string $query = null)
    {
        return $this->signatureRequestListAsyncWithHttpInfo($account_id, $page, $page_size, $query)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation signatureRequestListAsyncWithHttpInfo
     *
     * List Signature Requests
     *
     * @param string $account_id Which account to return SignatureRequests for. Must be a team member. Use &#x60;all&#x60; to indicate all team members. Defaults to your account. (optional)
     * @param int $page Which page number of the SignatureRequest List to return. Defaults to &#x60;1&#x60;. (optional, default to 1)
     * @param int $page_size Number of objects to be returned per page. Must be between &#x60;1&#x60; and &#x60;100&#x60;. Default is &#x60;20&#x60;. (optional, default to 20)
     * @param string $query String that includes search terms and/or fields to be used to filter the SignatureRequest objects. (optional)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function signatureRequestListAsyncWithHttpInfo(string $account_id = null, int $page = 1, int $page_size = 20, string $query = null)
    {
        $returnType = '\HelloSignSDK\Model\SignatureRequestListResponse';
        $request = $this->signatureRequestListRequest($account_id, $page, $page_size, $query);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'signatureRequestList'
     *
     * @param string $account_id Which account to return SignatureRequests for. Must be a team member. Use &#x60;all&#x60; to indicate all team members. Defaults to your account. (optional)
     * @param int $page Which page number of the SignatureRequest List to return. Defaults to &#x60;1&#x60;. (optional, default to 1)
     * @param int $page_size Number of objects to be returned per page. Must be between &#x60;1&#x60; and &#x60;100&#x60;. Default is &#x60;20&#x60;. (optional, default to 20)
     * @param string $query String that includes search terms and/or fields to be used to filter the SignatureRequest objects. (optional)
     *
     * @throws InvalidArgumentException
     * @return Psr7\Request
     */
    public function signatureRequestListRequest(string $account_id = null, int $page = 1, int $page_size = 20, string $query = null)
    {
        $resourcePath = '/signature_request/list';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        $formParams = [];
        $multipart = false;

        // query params
        if ($account_id !== null) {
            if ('form' === 'form' && is_array($account_id)) {
                foreach ($account_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['account_id'] = $account_id;
            }
        }
        // query params
        if ($page !== null) {
            if ('form' === 'form' && is_array($page)) {
                foreach ($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($page_size !== null) {
            if ('form' === 'form' && is_array($page_size)) {
                foreach ($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['page_size'] = $page_size;
            }
        }
        // query params
        if ($query !== null) {
            if ('form' === 'form' && is_array($query)) {
                foreach ($query as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['query'] = $query;
            }
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name' => 'body',
                        'contents' => $body,
                        'headers' => ['Content-Type' => 'application/json'],
                    ];
                }
                if ($payloadHook = $this->config->getPayloadHook()) {
                    $payloadHook('multipart', $multipartContents);
                }
                $httpBody = new Psr7\MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':' . $this->config->getPassword());
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Psr7\Query::build($queryParams);

        return new Psr7\Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation signatureRequestReleaseHold
     *
     * Release On-Hold Signature Request
     *
     * @param string $signature_request_id The id of the SignatureRequest to release. (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return Model\SignatureRequestGetResponse
     */
    public function signatureRequestReleaseHold(string $signature_request_id)
    {
        list($response) = $this->signatureRequestReleaseHoldWithHttpInfo($signature_request_id);

        return $response;
    }

    /**
     * Operation signatureRequestReleaseHoldWithHttpInfo
     *
     * Release On-Hold Signature Request
     *
     * @param string $signature_request_id The id of the SignatureRequest to release. (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of Model\SignatureRequestGetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function signatureRequestReleaseHoldWithHttpInfo(string $signature_request_id)
    {
        $request = $this->signatureRequestReleaseHoldRequest($signature_request_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode === 200) {
                if ('\HelloSignSDK\Model\SignatureRequestGetResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\HelloSignSDK\Model\SignatureRequestGetResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $rangeCode = substr('4XX', 1);
            if ($statusCode >= (int) "{$rangeCode}00" && $statusCode <= (int) "{$rangeCode}99") {
                if ('\HelloSignSDK\Model\ErrorResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\HelloSignSDK\Model\ErrorResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $returnType = '\HelloSignSDK\Model\SignatureRequestGetResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $statusCode = $e->getCode();

            if ($statusCode === 200) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\HelloSignSDK\Model\SignatureRequestGetResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            $rangeCode = substr('4XX', 1);
            if ($statusCode >= (int) "{$rangeCode}00" && $statusCode <= (int) "{$rangeCode}99") {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\HelloSignSDK\Model\ErrorResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            throw $e;
        }
    }

    /**
     * Operation signatureRequestReleaseHoldAsync
     *
     * Release On-Hold Signature Request
     *
     * @param string $signature_request_id The id of the SignatureRequest to release. (required)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function signatureRequestReleaseHoldAsync(string $signature_request_id)
    {
        return $this->signatureRequestReleaseHoldAsyncWithHttpInfo($signature_request_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation signatureRequestReleaseHoldAsyncWithHttpInfo
     *
     * Release On-Hold Signature Request
     *
     * @param string $signature_request_id The id of the SignatureRequest to release. (required)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function signatureRequestReleaseHoldAsyncWithHttpInfo(string $signature_request_id)
    {
        $returnType = '\HelloSignSDK\Model\SignatureRequestGetResponse';
        $request = $this->signatureRequestReleaseHoldRequest($signature_request_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'signatureRequestReleaseHold'
     *
     * @param string $signature_request_id The id of the SignatureRequest to release. (required)
     *
     * @throws InvalidArgumentException
     * @return Psr7\Request
     */
    public function signatureRequestReleaseHoldRequest(string $signature_request_id)
    {
        // verify the required parameter 'signature_request_id' is set
        if ($signature_request_id === null || (is_array($signature_request_id) && count($signature_request_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $signature_request_id when calling signatureRequestReleaseHold'
            );
        }

        $resourcePath = '/signature_request/release_hold/{signature_request_id}';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        $formParams = [];
        $multipart = false;

        // path params
        if ($signature_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'signature_request_id' . '}',
                ObjectSerializer::toPathValue($signature_request_id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name' => 'body',
                        'contents' => $body,
                        'headers' => ['Content-Type' => 'application/json'],
                    ];
                }
                if ($payloadHook = $this->config->getPayloadHook()) {
                    $payloadHook('multipart', $multipartContents);
                }
                $httpBody = new Psr7\MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':' . $this->config->getPassword());
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Psr7\Query::build($queryParams);

        return new Psr7\Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation signatureRequestRemind
     *
     * Send Request Reminder
     *
     * @param string $signature_request_id The id of the SignatureRequest to send a reminder for. (required)
     * @param Model\SignatureRequestRemindRequest $signature_request_remind_request signature_request_remind_request (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return Model\SignatureRequestGetResponse
     */
    public function signatureRequestRemind(string $signature_request_id, Model\SignatureRequestRemindRequest $signature_request_remind_request)
    {
        list($response) = $this->signatureRequestRemindWithHttpInfo($signature_request_id, $signature_request_remind_request);

        return $response;
    }

    /**
     * Operation signatureRequestRemindWithHttpInfo
     *
     * Send Request Reminder
     *
     * @param string $signature_request_id The id of the SignatureRequest to send a reminder for. (required)
     * @param Model\SignatureRequestRemindRequest $signature_request_remind_request (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of Model\SignatureRequestGetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function signatureRequestRemindWithHttpInfo(string $signature_request_id, Model\SignatureRequestRemindRequest $signature_request_remind_request)
    {
        $request = $this->signatureRequestRemindRequest($signature_request_id, $signature_request_remind_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode === 200) {
                if ('\HelloSignSDK\Model\SignatureRequestGetResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\HelloSignSDK\Model\SignatureRequestGetResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $rangeCode = substr('4XX', 1);
            if ($statusCode >= (int) "{$rangeCode}00" && $statusCode <= (int) "{$rangeCode}99") {
                if ('\HelloSignSDK\Model\ErrorResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\HelloSignSDK\Model\ErrorResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $returnType = '\HelloSignSDK\Model\SignatureRequestGetResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $statusCode = $e->getCode();

            if ($statusCode === 200) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\HelloSignSDK\Model\SignatureRequestGetResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            $rangeCode = substr('4XX', 1);
            if ($statusCode >= (int) "{$rangeCode}00" && $statusCode <= (int) "{$rangeCode}99") {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\HelloSignSDK\Model\ErrorResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            throw $e;
        }
    }

    /**
     * Operation signatureRequestRemindAsync
     *
     * Send Request Reminder
     *
     * @param string $signature_request_id The id of the SignatureRequest to send a reminder for. (required)
     * @param Model\SignatureRequestRemindRequest $signature_request_remind_request (required)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function signatureRequestRemindAsync(string $signature_request_id, Model\SignatureRequestRemindRequest $signature_request_remind_request)
    {
        return $this->signatureRequestRemindAsyncWithHttpInfo($signature_request_id, $signature_request_remind_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation signatureRequestRemindAsyncWithHttpInfo
     *
     * Send Request Reminder
     *
     * @param string $signature_request_id The id of the SignatureRequest to send a reminder for. (required)
     * @param Model\SignatureRequestRemindRequest $signature_request_remind_request (required)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function signatureRequestRemindAsyncWithHttpInfo(string $signature_request_id, Model\SignatureRequestRemindRequest $signature_request_remind_request)
    {
        $returnType = '\HelloSignSDK\Model\SignatureRequestGetResponse';
        $request = $this->signatureRequestRemindRequest($signature_request_id, $signature_request_remind_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'signatureRequestRemind'
     *
     * @param string $signature_request_id The id of the SignatureRequest to send a reminder for. (required)
     * @param Model\SignatureRequestRemindRequest $signature_request_remind_request (required)
     *
     * @throws InvalidArgumentException
     * @return Psr7\Request
     */
    public function signatureRequestRemindRequest(string $signature_request_id, Model\SignatureRequestRemindRequest $signature_request_remind_request)
    {
        // verify the required parameter 'signature_request_id' is set
        if ($signature_request_id === null || (is_array($signature_request_id) && count($signature_request_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $signature_request_id when calling signatureRequestRemind'
            );
        }
        // verify the required parameter 'signature_request_remind_request' is set
        if ($signature_request_remind_request === null || (is_array($signature_request_remind_request) && count($signature_request_remind_request) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $signature_request_remind_request when calling signatureRequestRemind'
            );
        }

        $resourcePath = '/signature_request/remind/{signature_request_id}';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        $formParams = ObjectSerializer::getFormParams(
            $signature_request_remind_request
        );

        $multipart = !empty($formParams);

        // path params
        if ($signature_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'signature_request_id' . '}',
                ObjectSerializer::toPathValue($signature_request_id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) === 0) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($signature_request_remind_request));
            } else {
                $httpBody = $signature_request_remind_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name' => 'body',
                        'contents' => $body,
                        'headers' => ['Content-Type' => 'application/json'],
                    ];
                }
                if ($payloadHook = $this->config->getPayloadHook()) {
                    $payloadHook('multipart', $multipartContents);
                }
                $httpBody = new Psr7\MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':' . $this->config->getPassword());
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Psr7\Query::build($queryParams);

        return new Psr7\Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation signatureRequestRemove
     *
     * Remove Signature Request Access
     *
     * @param string $signature_request_id The id of the SignatureRequest to remove. (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return void
     */
    public function signatureRequestRemove(string $signature_request_id)
    {
        $this->signatureRequestRemoveWithHttpInfo($signature_request_id);
    }

    /**
     * Operation signatureRequestRemoveWithHttpInfo
     *
     * Remove Signature Request Access
     *
     * @param string $signature_request_id The id of the SignatureRequest to remove. (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function signatureRequestRemoveWithHttpInfo(string $signature_request_id)
    {
        $request = $this->signatureRequestRemoveRequest($signature_request_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            $statusCode = $e->getCode();

            $rangeCode = substr('4XX', 1);
            if ($statusCode >= (int) "{$rangeCode}00" && $statusCode <= (int) "{$rangeCode}99") {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\HelloSignSDK\Model\ErrorResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            throw $e;
        }
    }

    /**
     * Operation signatureRequestRemoveAsync
     *
     * Remove Signature Request Access
     *
     * @param string $signature_request_id The id of the SignatureRequest to remove. (required)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function signatureRequestRemoveAsync(string $signature_request_id)
    {
        return $this->signatureRequestRemoveAsyncWithHttpInfo($signature_request_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation signatureRequestRemoveAsyncWithHttpInfo
     *
     * Remove Signature Request Access
     *
     * @param string $signature_request_id The id of the SignatureRequest to remove. (required)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function signatureRequestRemoveAsyncWithHttpInfo(string $signature_request_id)
    {
        $returnType = '';
        $request = $this->signatureRequestRemoveRequest($signature_request_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'signatureRequestRemove'
     *
     * @param string $signature_request_id The id of the SignatureRequest to remove. (required)
     *
     * @throws InvalidArgumentException
     * @return Psr7\Request
     */
    public function signatureRequestRemoveRequest(string $signature_request_id)
    {
        // verify the required parameter 'signature_request_id' is set
        if ($signature_request_id === null || (is_array($signature_request_id) && count($signature_request_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $signature_request_id when calling signatureRequestRemove'
            );
        }

        $resourcePath = '/signature_request/remove/{signature_request_id}';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        $formParams = [];
        $multipart = false;

        // path params
        if ($signature_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'signature_request_id' . '}',
                ObjectSerializer::toPathValue($signature_request_id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name' => 'body',
                        'contents' => $body,
                        'headers' => ['Content-Type' => 'application/json'],
                    ];
                }
                if ($payloadHook = $this->config->getPayloadHook()) {
                    $payloadHook('multipart', $multipartContents);
                }
                $httpBody = new Psr7\MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':' . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Psr7\Query::build($queryParams);

        return new Psr7\Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation signatureRequestSend
     *
     * Send Signature Request
     *
     * @param Model\SignatureRequestSendRequest $signature_request_send_request signature_request_send_request (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return Model\SignatureRequestGetResponse
     */
    public function signatureRequestSend(Model\SignatureRequestSendRequest $signature_request_send_request)
    {
        list($response) = $this->signatureRequestSendWithHttpInfo($signature_request_send_request);

        return $response;
    }

    /**
     * Operation signatureRequestSendWithHttpInfo
     *
     * Send Signature Request
     *
     * @param Model\SignatureRequestSendRequest $signature_request_send_request (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of Model\SignatureRequestGetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function signatureRequestSendWithHttpInfo(Model\SignatureRequestSendRequest $signature_request_send_request)
    {
        $request = $this->signatureRequestSendRequest($signature_request_send_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode === 200) {
                if ('\HelloSignSDK\Model\SignatureRequestGetResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\HelloSignSDK\Model\SignatureRequestGetResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $rangeCode = substr('4XX', 1);
            if ($statusCode >= (int) "{$rangeCode}00" && $statusCode <= (int) "{$rangeCode}99") {
                if ('\HelloSignSDK\Model\ErrorResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\HelloSignSDK\Model\ErrorResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $returnType = '\HelloSignSDK\Model\SignatureRequestGetResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $statusCode = $e->getCode();

            if ($statusCode === 200) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\HelloSignSDK\Model\SignatureRequestGetResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            $rangeCode = substr('4XX', 1);
            if ($statusCode >= (int) "{$rangeCode}00" && $statusCode <= (int) "{$rangeCode}99") {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\HelloSignSDK\Model\ErrorResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            throw $e;
        }
    }

    /**
     * Operation signatureRequestSendAsync
     *
     * Send Signature Request
     *
     * @param Model\SignatureRequestSendRequest $signature_request_send_request (required)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function signatureRequestSendAsync(Model\SignatureRequestSendRequest $signature_request_send_request)
    {
        return $this->signatureRequestSendAsyncWithHttpInfo($signature_request_send_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation signatureRequestSendAsyncWithHttpInfo
     *
     * Send Signature Request
     *
     * @param Model\SignatureRequestSendRequest $signature_request_send_request (required)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function signatureRequestSendAsyncWithHttpInfo(Model\SignatureRequestSendRequest $signature_request_send_request)
    {
        $returnType = '\HelloSignSDK\Model\SignatureRequestGetResponse';
        $request = $this->signatureRequestSendRequest($signature_request_send_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'signatureRequestSend'
     *
     * @param Model\SignatureRequestSendRequest $signature_request_send_request (required)
     *
     * @throws InvalidArgumentException
     * @return Psr7\Request
     */
    public function signatureRequestSendRequest(Model\SignatureRequestSendRequest $signature_request_send_request)
    {
        // verify the required parameter 'signature_request_send_request' is set
        if ($signature_request_send_request === null || (is_array($signature_request_send_request) && count($signature_request_send_request) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $signature_request_send_request when calling signatureRequestSend'
            );
        }

        $resourcePath = '/signature_request/send';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        $formParams = ObjectSerializer::getFormParams(
            $signature_request_send_request
        );

        $multipart = !empty($formParams);

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (count($formParams) === 0) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($signature_request_send_request));
            } else {
                $httpBody = $signature_request_send_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name' => 'body',
                        'contents' => $body,
                        'headers' => ['Content-Type' => 'application/json'],
                    ];
                }
                if ($payloadHook = $this->config->getPayloadHook()) {
                    $payloadHook('multipart', $multipartContents);
                }
                $httpBody = new Psr7\MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':' . $this->config->getPassword());
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Psr7\Query::build($queryParams);

        return new Psr7\Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation signatureRequestSendWithTemplate
     *
     * Send with Template
     *
     * @param Model\SignatureRequestSendWithTemplateRequest $signature_request_send_with_template_request signature_request_send_with_template_request (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return Model\SignatureRequestGetResponse
     */
    public function signatureRequestSendWithTemplate(Model\SignatureRequestSendWithTemplateRequest $signature_request_send_with_template_request)
    {
        list($response) = $this->signatureRequestSendWithTemplateWithHttpInfo($signature_request_send_with_template_request);

        return $response;
    }

    /**
     * Operation signatureRequestSendWithTemplateWithHttpInfo
     *
     * Send with Template
     *
     * @param Model\SignatureRequestSendWithTemplateRequest $signature_request_send_with_template_request (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of Model\SignatureRequestGetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function signatureRequestSendWithTemplateWithHttpInfo(Model\SignatureRequestSendWithTemplateRequest $signature_request_send_with_template_request)
    {
        $request = $this->signatureRequestSendWithTemplateRequest($signature_request_send_with_template_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode === 200) {
                if ('\HelloSignSDK\Model\SignatureRequestGetResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\HelloSignSDK\Model\SignatureRequestGetResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $rangeCode = substr('4XX', 1);
            if ($statusCode >= (int) "{$rangeCode}00" && $statusCode <= (int) "{$rangeCode}99") {
                if ('\HelloSignSDK\Model\ErrorResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\HelloSignSDK\Model\ErrorResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $returnType = '\HelloSignSDK\Model\SignatureRequestGetResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $statusCode = $e->getCode();

            if ($statusCode === 200) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\HelloSignSDK\Model\SignatureRequestGetResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            $rangeCode = substr('4XX', 1);
            if ($statusCode >= (int) "{$rangeCode}00" && $statusCode <= (int) "{$rangeCode}99") {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\HelloSignSDK\Model\ErrorResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            throw $e;
        }
    }

    /**
     * Operation signatureRequestSendWithTemplateAsync
     *
     * Send with Template
     *
     * @param Model\SignatureRequestSendWithTemplateRequest $signature_request_send_with_template_request (required)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function signatureRequestSendWithTemplateAsync(Model\SignatureRequestSendWithTemplateRequest $signature_request_send_with_template_request)
    {
        return $this->signatureRequestSendWithTemplateAsyncWithHttpInfo($signature_request_send_with_template_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation signatureRequestSendWithTemplateAsyncWithHttpInfo
     *
     * Send with Template
     *
     * @param Model\SignatureRequestSendWithTemplateRequest $signature_request_send_with_template_request (required)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function signatureRequestSendWithTemplateAsyncWithHttpInfo(Model\SignatureRequestSendWithTemplateRequest $signature_request_send_with_template_request)
    {
        $returnType = '\HelloSignSDK\Model\SignatureRequestGetResponse';
        $request = $this->signatureRequestSendWithTemplateRequest($signature_request_send_with_template_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'signatureRequestSendWithTemplate'
     *
     * @param Model\SignatureRequestSendWithTemplateRequest $signature_request_send_with_template_request (required)
     *
     * @throws InvalidArgumentException
     * @return Psr7\Request
     */
    public function signatureRequestSendWithTemplateRequest(Model\SignatureRequestSendWithTemplateRequest $signature_request_send_with_template_request)
    {
        // verify the required parameter 'signature_request_send_with_template_request' is set
        if ($signature_request_send_with_template_request === null || (is_array($signature_request_send_with_template_request) && count($signature_request_send_with_template_request) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $signature_request_send_with_template_request when calling signatureRequestSendWithTemplate'
            );
        }

        $resourcePath = '/signature_request/send_with_template';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        $formParams = ObjectSerializer::getFormParams(
            $signature_request_send_with_template_request
        );

        $multipart = !empty($formParams);

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (count($formParams) === 0) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($signature_request_send_with_template_request));
            } else {
                $httpBody = $signature_request_send_with_template_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name' => 'body',
                        'contents' => $body,
                        'headers' => ['Content-Type' => 'application/json'],
                    ];
                }
                if ($payloadHook = $this->config->getPayloadHook()) {
                    $payloadHook('multipart', $multipartContents);
                }
                $httpBody = new Psr7\MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':' . $this->config->getPassword());
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Psr7\Query::build($queryParams);

        return new Psr7\Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation signatureRequestUpdate
     *
     * Update Signature Request
     *
     * @param string $signature_request_id The id of the SignatureRequest to update. (required)
     * @param Model\SignatureRequestUpdateRequest $signature_request_update_request signature_request_update_request (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return Model\SignatureRequestGetResponse
     */
    public function signatureRequestUpdate(string $signature_request_id, Model\SignatureRequestUpdateRequest $signature_request_update_request)
    {
        list($response) = $this->signatureRequestUpdateWithHttpInfo($signature_request_id, $signature_request_update_request);

        return $response;
    }

    /**
     * Operation signatureRequestUpdateWithHttpInfo
     *
     * Update Signature Request
     *
     * @param string $signature_request_id The id of the SignatureRequest to update. (required)
     * @param Model\SignatureRequestUpdateRequest $signature_request_update_request (required)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of Model\SignatureRequestGetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function signatureRequestUpdateWithHttpInfo(string $signature_request_id, Model\SignatureRequestUpdateRequest $signature_request_update_request)
    {
        $request = $this->signatureRequestUpdateRequest($signature_request_id, $signature_request_update_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode === 200) {
                if ('\HelloSignSDK\Model\SignatureRequestGetResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\HelloSignSDK\Model\SignatureRequestGetResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $rangeCode = substr('4XX', 1);
            if ($statusCode >= (int) "{$rangeCode}00" && $statusCode <= (int) "{$rangeCode}99") {
                if ('\HelloSignSDK\Model\ErrorResponse' === '\SplFileObject') {
                    $content = $response->getBody(); //stream goes to serializer
                } else {
                    $content = (string) $response->getBody();
                }

                return [
                    ObjectSerializer::deserialize($content, '\HelloSignSDK\Model\ErrorResponse', []),
                    $response->getStatusCode(),
                    $response->getHeaders(),
                ];
            }

            $returnType = '\HelloSignSDK\Model\SignatureRequestGetResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            $statusCode = $e->getCode();

            if ($statusCode === 200) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\HelloSignSDK\Model\SignatureRequestGetResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            $rangeCode = substr('4XX', 1);
            if ($statusCode >= (int) "{$rangeCode}00" && $statusCode <= (int) "{$rangeCode}99") {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\HelloSignSDK\Model\ErrorResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
            }

            throw $e;
        }
    }

    /**
     * Operation signatureRequestUpdateAsync
     *
     * Update Signature Request
     *
     * @param string $signature_request_id The id of the SignatureRequest to update. (required)
     * @param Model\SignatureRequestUpdateRequest $signature_request_update_request (required)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function signatureRequestUpdateAsync(string $signature_request_id, Model\SignatureRequestUpdateRequest $signature_request_update_request)
    {
        return $this->signatureRequestUpdateAsyncWithHttpInfo($signature_request_id, $signature_request_update_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation signatureRequestUpdateAsyncWithHttpInfo
     *
     * Update Signature Request
     *
     * @param string $signature_request_id The id of the SignatureRequest to update. (required)
     * @param Model\SignatureRequestUpdateRequest $signature_request_update_request (required)
     *
     * @throws InvalidArgumentException
     * @return Promise\PromiseInterface
     */
    public function signatureRequestUpdateAsyncWithHttpInfo(string $signature_request_id, Model\SignatureRequestUpdateRequest $signature_request_update_request)
    {
        $returnType = '\HelloSignSDK\Model\SignatureRequestGetResponse';
        $request = $this->signatureRequestUpdateRequest($signature_request_id, $signature_request_update_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'signatureRequestUpdate'
     *
     * @param string $signature_request_id The id of the SignatureRequest to update. (required)
     * @param Model\SignatureRequestUpdateRequest $signature_request_update_request (required)
     *
     * @throws InvalidArgumentException
     * @return Psr7\Request
     */
    public function signatureRequestUpdateRequest(string $signature_request_id, Model\SignatureRequestUpdateRequest $signature_request_update_request)
    {
        // verify the required parameter 'signature_request_id' is set
        if ($signature_request_id === null || (is_array($signature_request_id) && count($signature_request_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $signature_request_id when calling signatureRequestUpdate'
            );
        }
        // verify the required parameter 'signature_request_update_request' is set
        if ($signature_request_update_request === null || (is_array($signature_request_update_request) && count($signature_request_update_request) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $signature_request_update_request when calling signatureRequestUpdate'
            );
        }

        $resourcePath = '/signature_request/update/{signature_request_id}';
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';

        $formParams = ObjectSerializer::getFormParams(
            $signature_request_update_request
        );

        $multipart = !empty($formParams);

        // path params
        if ($signature_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'signature_request_id' . '}',
                ObjectSerializer::toPathValue($signature_request_id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (count($formParams) === 0) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($signature_request_update_request));
            } else {
                $httpBody = $signature_request_update_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                if (!empty($body)) {
                    $multipartContents[] = [
                        'name' => 'body',
                        'contents' => $body,
                        'headers' => ['Content-Type' => 'application/json'],
                    ];
                }
                if ($payloadHook = $this->config->getPayloadHook()) {
                    $payloadHook('multipart', $multipartContents);
                }
                $httpBody = new Psr7\MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ':' . $this->config->getPassword());
        }
        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Psr7\Query::build($queryParams);

        return new Psr7\Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = $this->config->getOptions();
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
