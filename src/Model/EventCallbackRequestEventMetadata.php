<?php
/**
 * EventCallbackRequestEventMetadata
 *
 * PHP version 7.3
 *
 * @category Class
 * @author   OpenAPI Generator team
 * @see     https://openapi-generator.tech
 */

/**
 * HelloSign API
 *
 * HelloSign v3 API
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: apisupport@hellosign.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace HelloSignSDK\Model;

use ArrayAccess;
use HelloSignSDK\ObjectSerializer;
use JsonSerializable;
use ReturnTypeWillChange;

/**
 * EventCallbackRequestEventMetadata Class Doc Comment
 *
 * @category Class
 * @description Specific metadata about the event.
 * @author   OpenAPI Generator team
 * @see     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class EventCallbackRequestEventMetadata implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'EventCallbackRequestEventMetadata';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'related_signature_id' => 'string',
        'reported_for_account_id' => 'string',
        'reported_for_app_id' => 'string',
        'event_message' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'related_signature_id' => null,
        'reported_for_account_id' => null,
        'reported_for_app_id' => null,
        'event_message' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'related_signature_id' => 'related_signature_id',
        'reported_for_account_id' => 'reported_for_account_id',
        'reported_for_app_id' => 'reported_for_app_id',
        'event_message' => 'event_message',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'related_signature_id' => 'setRelatedSignatureId',
        'reported_for_account_id' => 'setReportedForAccountId',
        'reported_for_app_id' => 'setReportedForAppId',
        'event_message' => 'setEventMessage',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'related_signature_id' => 'getRelatedSignatureId',
        'reported_for_account_id' => 'getReportedForAccountId',
        'reported_for_app_id' => 'getReportedForAppId',
        'event_message' => 'getEventMessage',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param array|null $data Associated array of property values
     *                         initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['related_signature_id'] = $data['related_signature_id'] ?? null;
        $this->container['reported_for_account_id'] = $data['reported_for_account_id'] ?? null;
        $this->container['reported_for_app_id'] = $data['reported_for_app_id'] ?? null;
        $this->container['event_message'] = $data['event_message'] ?? null;
    }

    public static function fromArray(array $data): EventCallbackRequestEventMetadata
    {
        /** @var EventCallbackRequestEventMetadata $obj */
        $obj = ObjectSerializer::deserialize(
            ObjectSerializer::instantiateFiles(static::class, $data),
            EventCallbackRequestEventMetadata::class,
        );

        return $obj;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets related_signature_id
     *
     * @return string|null
     */
    public function getRelatedSignatureId()
    {
        return $this->container['related_signature_id'];
    }

    /**
     * Sets related_signature_id
     *
     * @param string|null $related_signature_id Signature ID for a specific signer. Applicable to `signature_request_signed` and `signature_request_viewed` events.
     *
     * @return self
     */
    public function setRelatedSignatureId(?string $related_signature_id)
    {
        $this->container['related_signature_id'] = $related_signature_id;

        return $this;
    }

    /**
     * Gets reported_for_account_id
     *
     * @return string|null
     */
    public function getReportedForAccountId()
    {
        return $this->container['reported_for_account_id'];
    }

    /**
     * Sets reported_for_account_id
     *
     * @param string|null $reported_for_account_id account ID the event was reported for
     *
     * @return self
     */
    public function setReportedForAccountId(?string $reported_for_account_id)
    {
        $this->container['reported_for_account_id'] = $reported_for_account_id;

        return $this;
    }

    /**
     * Gets reported_for_app_id
     *
     * @return string|null
     */
    public function getReportedForAppId()
    {
        return $this->container['reported_for_app_id'];
    }

    /**
     * Sets reported_for_app_id
     *
     * @param string|null $reported_for_app_id app ID the event was reported for
     *
     * @return self
     */
    public function setReportedForAppId(?string $reported_for_app_id)
    {
        $this->container['reported_for_app_id'] = $reported_for_app_id;

        return $this;
    }

    /**
     * Gets event_message
     *
     * @return string|null
     */
    public function getEventMessage()
    {
        return $this->container['event_message'];
    }

    /**
     * Sets event_message
     *
     * @param string|null $event_message message about a declined or failed (due to error) signature flow
     *
     * @return self
     */
    public function setEventMessage(?string $event_message)
    {
        $this->container['event_message'] = $event_message;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param mixed $offset Offset
     *
     * @return bool
     */
    #[ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param mixed $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param mixed $offset Offset
     * @param mixed $value Value to be set
     *
     * @return void
     */
    #[ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param mixed $offset Offset
     *
     * @return void
     */
    #[ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return scalar|object|array|null returns data which can be serialized by json_encode(), which is a value
     *                                  of any type other than a resource
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_UNESCAPED_SLASHES
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
